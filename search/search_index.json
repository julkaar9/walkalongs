{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-walkalongs","title":"Welcome to walkalongs","text":"<p>walkalongs are resources and solutions of various technologies that I am currently learning. These are not meant to be tutorials so it is very likely  most solutions will not have detailed explanations. These are not walkthroughs but walkalongs ! </p>"},{"location":"#try-it-yourself","title":"Try it yourself","text":"<p>You may wish to solve the questions yourself. Clone the repo and install the requirements. <code>pip install -r requirements.txt</code> </p>"},{"location":"#running-the-django-orm-notebooks-django-shell-plus","title":"Running the django orm notebooks (Django Shell-plus)","text":"<p>cd into <code>server/notebooks</code> Then open the notebook using <code>python ../manage.py shell_plus --notebook</code></p> <p>If you are getting this error <code>ModuleNotFoundError: No module named 'notebook.notebookapp</code>, then try <code>pip install notebook==6.5.5</code>. see this issue</p>"},{"location":"#list-of-content-currently-available","title":"List of content currently available","text":"<p>1. w3school sql exercises using django 2. sql-practice (easy) exercies using django 3. sql-practice (medium) exercies using django 4. sql-practice (hard) exercies using django </p>"},{"location":"orms/django/sql-practice-easy/","title":"SQL-PRACTICE easy exercises using Django ORM","text":"<p>https://www.sql-practice.com/</p> <p>This walkalong consists of easy questions and their solutions from sql-practice.com, written in both SQL and django ORM, They query results are also compared for equality. Insert, Update and Delete queries are not included to keep database consistent.</p>"},{"location":"orms/django/sql-practice-easy/#try-it-yourself","title":"Try it yourself","text":"<p>The notebook (Django Shell-plus) is located in here  First cd into the notebook directory <code>cd server/notebook</code> Then open the notebook using <code>python ../manage.py shell_plus --notebook</code> </p> <pre><code>import os\nos.environ[\"DJANGO_ALLOW_ASYNC_UNSAFE\"] = \"true\"\nfrom utils import *\nfrom sqlparse import format\n</code></pre> <pre><code>from django.db.models import (\nQ,\nF,\nCase,\nWhen,\nCount,\nFunc,\nMin,\nMax,\nSum,\nAvg,\nValue,\nOuterRef,\nSubquery,\nCharField,\n)\nfrom django.db.models.functions import Concat, Cast, Round, Length\nfrom django.db import connection\nfrom customer_db.models import Provinces, Patients, Doctors, Admissions\n</code></pre> <pre><code>def print_sql(queryset):\nformatted = format(str(queryset.query), reindent=True)\nprint(formatted)\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#testing-some-basic-queries","title":"Testing some basic queries","text":"<pre><code>sqlq = sql_raw(\"SELECT * FROM Patients LIMIT 3\") \n</code></pre> <pre><code>common_fields = [\n\"first_name\",\n\"last_name\",\n\"gender\",\n\"birth_date\",\n\"city\",\n\"province_id\",\n\"allergies\",\n\"height\",\n\"weight\",\n]\n</code></pre> <pre><code>ormq = Patients.objects.values(patient_id=F(\"id\"), *common_fields)[:3]\norm_to_df(ormq)\n</code></pre> <pre><code>|    | first_name   | last_name   | gender   | birth_date   | city      | province_id   | allergies   |   height |   weight |   patient_id |\n|---:|:-------------|:------------|:---------|:-------------|:----------|:--------------|:------------|---------:|---------:|-------------:|\n|  0 | Cheryl       | Mason       | F        | 1978-05-14   | Toronto   | ON            | Peanuts     |      170 |       65 |            1 |\n|  1 | Jason        | Fleming     | M        | 1990-08-02   | Vancouver | BC            | Sulfa drugs |      185 |       80 |            2 |\n|  2 | Tiffany      | McDonald    | F        | 1985-03-27   | Calgary   | AB            | Lactose     |      155 |       58 |            3 |\n</code></pre> <pre><code>equal(sqlq, ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-1","title":"Easy 1","text":"<p>Show first name, last name, and gender of patients who's gender is 'M'</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name,\n  last_name,\n  gender\nFROM Patients\nWHERE gender = 'M';\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(gender=\"M\").values(\"first_name\", \"last_name\", \"gender\")\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"patients\".\"gender\"\nFROM \"patients\"\nWHERE \"patients\".\"gender\" = M\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   | last_name   | gender   |\n|---:|:-------------|:------------|:---------|\n|  0 | Jason        | Fleming     | M        |\n|  1 | Alex         | Carter      | M        |\n|  2 | Gavin        | Bryant      | M        |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-2","title":"Easy 2","text":"<p>Show first name and last name of patients who does not have allergies. (null)</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name,\n  last_name\nFROM Patients\nWHERE allergies IS NULL;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(allergies=None).values(\"first_name\", \"last_name\")\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\"\nFROM \"patients\"\nWHERE \"patients\".\"allergies\" IS NULL\n</code></pre> <pre><code>ormq1 = Patients.objects.filter(allergies__isnull=True).values(\n\"first_name\", \"last_name\"\n)\nequal(sqlq, ormq1)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\"\nFROM \"patients\"\nWHERE \"patients\".\"allergies\" IS NULL\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   | last_name   |\n|---:|:-------------|:------------|\n|  0 | Alex         | Carter      |\n|  1 | Adam         | Nguyen      |\n|  2 | Shane        | Simpson     |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-3","title":"Easy 3","text":"<p>Show first name of patients that start with the letter 'C'</p> <pre><code>qstr = \"\"\"\nSELECT first_name\nFROM Patients\nWHERE first_name LIKE 'C%';\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(first_name__startswith=\"C\").values(\"first_name\")\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\"\nFROM \"patients\"\nWHERE \"patients\".\"first_name\" LIKE C% ESCAPE '\\'\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   |\n|---:|:-------------|\n|  0 | Cheryl       |\n|  1 | Cassandra    |\n|  2 | Cameron      |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-4","title":"Easy 4","text":"<p>Show first name and last name of patients that weight within the range of 100 to 120 (inclusive) We will do 70 - 80</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name,\n  last_name\nFROM Patients\nWHERE weight BETWEEN 70 AND 80;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(weight__range=[70, 80]).values(\"first_name\", \"last_name\")\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\"\nFROM \"patients\"\nWHERE \"patients\".\"weight\" BETWEEN 70 AND 80\n</code></pre> <pre><code>ormq1 = Patients.objects.filter(weight__gte=70, weight__lte=80).values(\n\"first_name\", \"last_name\"\n)\nequal(sqlq, ormq1)\nprint_sql(ormq1)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\"\nFROM \"patients\"\nWHERE (\"patients\".\"weight\" &gt;= 70\n       AND \"patients\".\"weight\" &lt;= 80)\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   | last_name   |\n|---:|:-------------|:------------|\n|  0 | Jason        | Fleming     |\n|  1 | Alex         | Carter      |\n|  2 | Gavin        | Bryant      |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-5","title":"Easy 5","text":"<p>Show first name and last name concatinated into one column to show their full name.</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name || ' ' || last_name AS full_name\nFROM patients;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code># sqlq =  sql_raw(\"SELECT CONCAT(first_name,' ', last_name) full_name FROM Patients;\")\normq = Patients.objects.values(full_name=Concat(\"first_name\", Value(\" \"), \"last_name\"))\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT COALESCE(\"patients\".\"first_name\",) || COALESCE(COALESCE(,) || COALESCE(\"patients\".\"last_name\",),) AS \"full_name\"\nFROM \"patients\"\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | full_name        |\n|---:|:-----------------|\n|  0 | Cheryl Mason     |\n|  1 | Jason Fleming    |\n|  2 | Tiffany McDonald |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-6","title":"Easy 6","text":"<p>Show first name, last name, and the full province name of each patient.</p> <p>Example: 'Ontario' instead of 'ON'</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name,\n  last_name,\n  province_name\nFROM Patients p\n  INNER JOIN province_names pn ON p.province_id = pn.province_id;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code># The filter ensures an Inner join is performed\normq = Patients.objects.filter(province__isnull=False).values(\n\"first_name\", \"last_name\", province_name=F(\"province__name\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"province_names\".\"province_name\" AS \"province_name\"\nFROM \"patients\"\nINNER JOIN \"province_names\" ON (\"patients\".\"province_id\" = \"province_names\".\"province_id\")\nWHERE \"patients\".\"province_id\" IS NOT NULL\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   | last_name   | province_name    |\n|---:|:-------------|:------------|:-----------------|\n|  0 | Cheryl       | Mason       | Ontario          |\n|  1 | Jason        | Fleming     | British Columbia |\n|  2 | Tiffany      | McDonald    | Alberta          |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-7","title":"Easy 7","text":"<p>Show how many patients have a birth_date with 2010 as the birth year. We will do 1995</p> <pre><code># sqlq =  sql_raw(\"SELECT COUNT(*) birth_year FROM Patients WHERE YEAR(birth_date) = 2010;\")\n# for sqlite (Notice the '1995' instead of 1995)\nqstr = \"\"\"\nSELECT COUNT(*) AS birth_count\nFROM Patients\nWHERE strftime('%Y', birth_date) = '1995';\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.filter(birth_date__year=1995)\n.annotate(birth_count=Func(F(\"id\"), function=\"Count\"))\n.values(\"birth_count\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT Count(\"patients\".\"patient_id\") AS \"birth_count\"\nFROM \"patients\"\nWHERE \"patients\".\"birth_date\" BETWEEN 1995-01-01 AND 1995-12-31\n</code></pre> <pre><code>ormq = Patients.objects.filter(birth_date__year=1995).aggregate(\nbirth_count=Count(\"birth_date\")\n)\nprint(ormq)\nequal(sqlq, ormq)\n</code></pre> <pre><code>{'birth_count': 5}\nEqual \u2714\ufe0f\n</code></pre> <pre><code>ormq1 = Patients.objects.filter(birth_date__year=1995).count()\normq1 = [{\"birth_count\": ormq1}]\nequal(sqlq, ormq1)\n</code></pre> <pre><code>Equal \u2714\ufe0f\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    |   birth_count |\n|---:|--------------:|\n|  0 |             5 |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-8","title":"Easy 8","text":"<p>Show the first_name, last_name, and height of the patient with the greatest height.</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name,\n  last_name,\n  Max(height) AS max_height\nFROM patients;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code># Subclassing Max and setting contains_aggregate = False also works\n# class NonAggrMax(Max):\n#     contains_aggregate = False\normq = Patients.objects.annotate(max_height=Func(\"height\", function=\"Max\")).values(\n\"first_name\", \"last_name\", \"max_height\"\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       Max(\"patients\".\"height\") AS \"max_height\"\nFROM \"patients\"\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    | first_name   | last_name   |   max_height |\n|---:|:-------------|:------------|-------------:|\n|  0 | Cameron      | Gupta       |          190 |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-9","title":"Easy 9","text":"<p>Show all columns for patients who have one of the following patient_ids: 1,45,534,879,1000 We will use 1,45,53,87,100</p> <pre><code>qstr = \"\"\"\nSELECT\n  *\nFROM patients\nWHERE patient_id IN (1, 45, 53, 87, 100);\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(id__in=[1, 45, 53, 87, 100]).values(\npatient_id=F(\"id\"), *common_fields\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"patients\".\"gender\",\n       \"patients\".\"birth_date\",\n       \"patients\".\"city\",\n       \"patients\".\"province_id\",\n       \"patients\".\"allergies\",\n       \"patients\".\"height\",\n       \"patients\".\"weight\",\n       \"patients\".\"patient_id\" AS \"patient_id\"\nFROM \"patients\"\nWHERE \"patients\".\"patient_id\" IN (1,\n                                  45,\n                                  53,\n                                  87,\n                                  100)\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    | first_name   | last_name   | gender   | birth_date   | city     | province_id   | allergies   |   height |   weight |   patient_id |\n|---:|:-------------|:------------|:---------|:-------------|:---------|:--------------|:------------|---------:|---------:|-------------:|\n|  0 | Cheryl       | Mason       | F        | 1978-05-14   | Toronto  | ON            | Peanuts     |      170 |       65 |            1 |\n|  1 | Ella         | Lemieux     | F        | 1991-05-01   | Halifax  | NS            | Lactose     |      164 |       60 |           45 |\n|  2 | Avery        | Roy         | F        | 1993-05-08   | Halifax  | NS            |             |      165 |       61 |           53 |\n|  3 | Avery        | Chen        | F        | 1989-12-07   | Winnipeg | MB            |             |      163 |       58 |           87 |\n|  4 | Nathan       | Gupta       | M        | 1986-01-14   | Victoria | BC            | Lactose     |      184 |       82 |          100 |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-10","title":"Easy 10","text":"<p>Show the total number of admissions</p> <pre><code>sqlq = sql_raw(\"SELECT COUNT(*) AS total FROM admissions;\")\normq = Admissions.objects.aggregate(total=Count(\"id\"))\nequal(sqlq, ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\n</code></pre> <pre><code>ormq1 = Admissions.objects.count()\normq1 = [{\"total\": ormq1}]\nequal(sqlq, ormq1)\n</code></pre> <pre><code>Equal \u2714\ufe0f\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    |   total |\n|---:|--------:|\n|  0 |     170 |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-11","title":"Easy 11","text":"<p>Show all the columns from admissions where the patient was admitted and discharged on the same day.</p> <pre><code>qstr = \"\"\"\nSELECT *\nFROM admissions\nWHERE admission_date = discharge_date;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>admission_fields = [\n\"id\",\n\"patient_id\",\n\"admission_date\",\n\"discharge_date\",\n\"diagnosis\",\n\"attending_doctor_id\",\n]\n</code></pre> <pre><code>ormq = Admissions.objects.filter(admission_date=F(\"discharge_date\")).values(\n*admission_fields\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"admissions\".\"id\",\n       \"admissions\".\"patient_id\",\n       \"admissions\".\"admission_date\",\n       \"admissions\".\"discharge_date\",\n       \"admissions\".\"diagnosis\",\n       \"admissions\".\"attending_doctor_id\"\nFROM \"admissions\"\nWHERE \"admissions\".\"admission_date\" = (\"admissions\".\"discharge_date\")\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   id |   patient_id | admission_date   | discharge_date   | diagnosis       |   attending_doctor_id |\n|---:|-----:|-------------:|:-----------------|:-----------------|:----------------|----------------------:|\n|  0 |  159 |           59 | 2022-06-07       | 2022-06-07       | Meningitis      |                     5 |\n|  1 |  160 |           60 | 2022-06-08       | 2022-06-08       | Anemia          |                    12 |\n|  2 |  162 |           62 | 2022-06-10       | 2022-06-10       | Gastroenteritis |                    16 |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-12","title":"Easy 12","text":"<p>Show the patient id and the total number of admissions for patient_id 579. We will do 57</p> <pre><code>qstr = \"\"\"\nSELECT\n  patient_id,\n  Count(patient_id) admissions\nFROM admissions\nWHERE patient_id = 57;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nAdmissions.objects.filter(patient_id=57)\n.annotate(admissions=Func(F(\"patient_id\"), function=\"Count\"))\n.values(\"patient_id\", \"admissions\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"admissions\".\"patient_id\",\n       Count(\"admissions\".\"patient_id\") AS \"admissions\"\nFROM \"admissions\"\nWHERE \"admissions\".\"patient_id\" = 57\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   patient_id |   admissions |\n|---:|-------------:|-------------:|\n|  0 |           57 |            2 |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-13","title":"Easy 13","text":"<p>Based on the cities that our patients live in, show unique cities that are in province_id 'NS'?</p> <pre><code>qstr = \"\"\"\nSELECT DISTINCT city\nFROM patients\nWHERE province_id = 'NS';\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(province__id=\"NS\").values(\"city\").distinct()\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT DISTINCT \"patients\".\"city\"\nFROM \"patients\"\nWHERE \"patients\".\"province_id\" = NS\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    | city    |\n|---:|:--------|\n|  0 | Halifax |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-14","title":"Easy 14","text":"<p>Write a query to find the first_name, last name and birth date of patients who has height greater than 160 and weight greater than 70</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name,\n  last_name,\n  birth_date\nFROM patients\nWHERE height &gt; 160 AND weight &gt; 70;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(height__gt=160, weight__gt=70).values(\n\"first_name\", \"last_name\", \"birth_date\"\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"patients\".\"birth_date\"\nFROM \"patients\"\nWHERE (\"patients\".\"height\" &gt; 160\n       AND \"patients\".\"weight\" &gt; 70)\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   | last_name   | birth_date   |\n|---:|:-------------|:------------|:-------------|\n|  0 | Jason        | Fleming     | 1990-08-02   |\n|  1 | Alex         | Carter      | 1976-11-18   |\n|  2 | Gavin        | Bryant      | 1980-02-06   |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-15","title":"Easy 15","text":"<p>Write a query to find list of patients first_name, last_name, and allergies from Hamilton where allergies are not null. We will use Toronto</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name,\n  last_name,\n  allergies\nFROM patients\nWHERE\n  city = 'Toronto'\n  AND allergies IS NOT NULL;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(city=\"Toronto\", allergies__isnull=False).values(\n\"first_name\", \"last_name\", \"allergies\"\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"patients\".\"allergies\"\nFROM \"patients\"\nWHERE (\"patients\".\"allergies\" IS NOT NULL\n       AND \"patients\".\"city\" = Toronto)\n</code></pre> <pre><code>ormq1 = Patients.objects.filter(\n~Q(allergies=None),\ncity=\"Toronto\",\n).values(\"first_name\", \"last_name\", \"allergies\")\nequal(sqlq, ormq1)\nprint_sql(ormq1)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"patients\".\"allergies\"\nFROM \"patients\"\nWHERE (NOT (\"patients\".\"allergies\" IS NULL)\n       AND \"patients\".\"city\" = Toronto)\n</code></pre> <pre><code>ormq2 = (\nPatients.objects.filter(city=\"Toronto\")\n.exclude(allergies=None)\n.values(\"first_name\", \"last_name\", \"allergies\")\n)\nequal(sqlq, ormq2)\nprint_sql(ormq2)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"patients\".\"allergies\"\nFROM \"patients\"\nWHERE (\"patients\".\"city\" = Toronto\n       AND NOT (\"patients\".\"allergies\" IS NULL))\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   | last_name   | allergies   |\n|---:|:-------------|:------------|:------------|\n|  0 | Cheryl       | Mason       | Peanuts     |\n|  1 | Kimberly     | Lee         | Pollen      |\n|  2 | Maria        | Singh       | Pollen      |\n</code></pre>"},{"location":"orms/django/sql-practice-easy/#easy-16","title":"Easy 16","text":"<p>Based on cities where our patient lives in, write a query to display the list of unique city starting with a vowel (a, e, i, o, u). Show the result order in ascending by city.</p> <pre><code># You can use city LIKE '[aeiou]%'\n# We are doing case insensitve matching here.\nqstr = \"\"\"\nSELECT DISTINCT city\nFROM patients\nWHERE\n  city LIKE 'a%'\n  OR city LIKE 'e%'\n  OR city LIKE 'i%'\n  OR city LIKE 'o%'\n  OR city LIKE 'u%'\nORDER BY city;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>query = Q()\nfor ch in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\nquery |= Q(city__istartswith=ch)\normq = Patients.objects.filter(query).values(\"city\").distinct().order_by(\"city\")\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT DISTINCT \"patients\".\"city\"\nFROM \"patients\"\nWHERE (\"patients\".\"city\" LIKE a% ESCAPE '\\' OR \"patients\".\"city\" LIKE e% ESCAPE '\\' OR \"patients\".\"city\" LIKE i% ESCAPE '\\' OR \"patients\".\"city\" LIKE o% ESCAPE '\\' OR \"patients\".\"city\" LIKE u% ESCAPE '\\')\nORDER BY \"patients\".\"city\" ASC\n</code></pre> <pre><code>ormq1 = (\nPatients.objects.filter(city__regex=r\"(?i)^[aeiou].+\")\n.values(\"city\")\n.distinct()\n.order_by(\"city\")\n)\nequal(sqlq, ormq1)\nprint_sql(ormq1)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT DISTINCT \"patients\".\"city\"\nFROM \"patients\"\nWHERE \"patients\".\"city\" REGEXP (?i)^[aeiou].+\nORDER BY \"patients\".\"city\" ASC\n</code></pre> <pre><code>orm_to_df(ormq1)\n</code></pre> <pre><code>|    | city   |\n|---:|:-------|\n|  0 | Ottawa |\n</code></pre>"},{"location":"orms/django/sql-practice-hard/","title":"SQL-PRACTICE hard exercises using Django ORM","text":"<p>https://www.sql-practice.com/</p> <p>This walkalong consists of hard questions and their solutions from sql-practice.com, written in both SQL and django ORM, They query results are also compared for equality. Insert, Update and Delete queries are not included to keep database consistent.</p>"},{"location":"orms/django/sql-practice-hard/#try-it-yourself","title":"Try it yourself","text":"<p>The notebook (Django Shell-plus) is located in here  First cd into the notebook directory <code>cd server/notebook</code> Then open the notebook using <code>python ../manage.py shell_plus --notebook</code> </p> <pre><code>import os\nos.environ[\"DJANGO_ALLOW_ASYNC_UNSAFE\"] = \"true\"\nfrom utils import *\n</code></pre> <pre><code>from django.db.models import (\nQ,\nF,\nCase,\nWhen,\nCount,\nFunc,\nMin,\nMax,\nSum,\nAvg,\nValue,\nOuterRef,\nSubquery,\nWindow,\nCharField,\nFloatField,\n)\nfrom django.db.models.lookups import Exact, GreaterThanOrEqual\nfrom django.db.models.functions import Concat, Cast, Round, Length, Lag\nfrom django.db import connection\nfrom customer_db.models import Provinces, Patients, Doctors, Admissions\n</code></pre> <pre><code>def orm_to_df(record: any) -&gt; pd.DataFrame:\ntry:\niter(record)\nexcept:\nrecord = [record]\nif isinstance(record, dict):\nrecord = [record]\ndf = pd.DataFrame.from_records(record)\nprint(df.to_markdown())\n</code></pre> <pre><code>patient_fields = [\n\"first_name\",\n\"last_name\",\n\"gender\",\n\"birth_date\",\n\"city\",\n\"province_id\",\n\"allergies\",\n\"height\",\n\"weight\",\n]\n</code></pre>"},{"location":"orms/django/sql-practice-hard/#hard-1","title":"Hard 1","text":"<p>Show all of the patients grouped into weight groups. Show the total amount of patients in each weight group. Order the list by the weight group decending.</p> <p>For example, if they weight 100 to 109 they are placed in the 100 weight group, 110-119 = 110 weight group, etc.</p> <pre><code>qstr = \"\"\"\nSELECT\n  ROUND(weight / 10, 0) * 10 AS weight_class,\n  COUNT(patient_id) AS patient_count\nFROM patients\nGROUP BY weight_class\nORDER BY weight_class DESC\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.values(weight_class=Round(F(\"weight\") / 10, 0) * 10)\n.annotate(patient_count=Count(\"id\"))\n.order_by(\"-weight_class\")\n.values(\"weight_class\", \"patient_count\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT (ROUND((\"patients\".\"weight\" / 10), 0) * 10) AS \"weight_class\",\n       COUNT(\"patients\".\"patient_id\") AS \"patient_count\"\nFROM \"patients\"\nGROUP BY 1\nORDER BY 1 DESC\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   weight_class |   patient_count |\n|---:|---------------:|----------------:|\n|  0 |             90 |               1 |\n|  1 |             80 |              20 |\n|  2 |             70 |              29 |\n</code></pre>"},{"location":"orms/django/sql-practice-hard/#hard-2","title":"Hard 2","text":"<p>Show patient_id, weight, height, isObese from the patients table.</p> <p>Display isObese as a boolean 0 or 1. Obese is defined as weight(kg)/(height(m)2) &gt;= 30. weight is in units kg. height is in units cm.</p> <p>We will do 24</p> <pre><code>qstr = \"\"\"\nSELECT\n  patient_id AS id,\n  weight,\n  height,\n  CASE\n    WHEN weight * 10000/ (height * height) &gt;= 24 THEN 1\n    ELSE 0\n  END AS isObese\nFROM patients\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.annotate(\ntmp_weight=F(\"weight\") * 10000 / (F(\"height\") * F(\"height\"))\n).values(\n\"id\", \"weight\", \"height\", isObese=Case(When(tmp_weight__gte=24, then=1), default=0)\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"patient_id\",\n       \"patients\".\"weight\",\n       \"patients\".\"height\",\n       CASE\n           WHEN ((\"patients\".\"weight\" * 10000) / (\"patients\".\"height\" * \"patients\".\"height\")) &gt;= 24 THEN 1\n           ELSE 0\n       END AS \"isObese\"\nFROM \"patients\"\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   id |   weight |   height |   isObese |\n|---:|-----:|---------:|---------:|----------:|\n|  0 |    1 |       65 |      170 |         0 |\n|  1 |    2 |       80 |      185 |         0 |\n|  2 |    3 |       58 |      155 |         1 |\n</code></pre>"},{"location":"orms/django/sql-practice-hard/#hard-3","title":"Hard 3","text":"<p>Show patient_id, first_name, last_name, and attending doctor's specialty. Show only the patients who has a diagnosis as 'Epilepsy' and the doctor's first name is 'Lisa'</p> <p>Check patients, admissions, and doctors tables for required information. We will do 'Anemia'</p> <pre><code>qstr = \"\"\"\nSELECT\n  p.patient_id,\n  p.first_name,\n  p.last_name,\n  speciality\nFROM admissions AS a\n  JOIN patients p ON p.patient_id = a.patient_id\n  JOIN doctors d ON a.attending_doctor_id = d.doctor_id\nWHERE\n  diagnosis = 'Anemia'\n  and d.first_name = 'Lisa'\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Admissions.objects.filter(\ndiagnosis=\"Anemia\", attending_doctor__first_name=\"Lisa\"\n).values(\n\"patient_id\",\nfirst_name=F(\"patient__first_name\"),\nlast_name=F(\"patient__last_name\"),\nspeciality=F(\"attending_doctor__speciality\"),\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"admissions\".\"patient_id\",\n       \"patients\".\"first_name\" AS \"first_name\",\n       \"patients\".\"last_name\" AS \"last_name\",\n       \"doctors\".\"speciality\" AS \"speciality\"\nFROM \"admissions\"\nINNER JOIN \"doctors\" ON (\"admissions\".\"attending_doctor_id\" = \"doctors\".\"doctor_id\")\nINNER JOIN \"patients\" ON (\"admissions\".\"patient_id\" = \"patients\".\"patient_id\")\nWHERE (\"doctors\".\"first_name\" = Lisa\n       AND \"admissions\".\"diagnosis\" = Anemia)\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   patient_id | first_name   | last_name   | speciality    |\n|---:|-------------:|:-------------|:------------|:--------------|\n|  0 |           51 | Isabelle     | Lee         | Endocrinology |\n</code></pre>"},{"location":"orms/django/sql-practice-hard/#hard-4","title":"Hard 4","text":"<p>All patients who have gone through admissions, can see their medical documents on our site. Those patients are given a temporary password after their first admission. Show the patient_id and temp_password.</p> <p>The password must be the following, in order: 1. patient_id 2. the numerical length of patient's last_name 3. year of patient's birth_date</p> <pre><code># use YEAR(birth_date) in other databases\nqstr = \"\"\"\nSELECT\n  p.patient_id,\n  p.patient_id || LENGTH(last_name) || strftime('%Y', birth_date) AS temp_password\nFROM patients p\nWHERE patient_id IN (\n    SELECT DISTINCT(patient_id)\n    FROM admissions\n  )\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(\nid__in=Subquery(Admissions.objects.values(\"patient_id\").distinct())\n).values(\npatient_id=F(\"id\"),\ntemp_password=Cast(\nConcat(\"id\", Length(\"last_name\"), \"birth_date__year\"), CharField()\n),\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"patient_id\" AS \"patient_id\",\n       CAST(COALESCE(\"patients\".\"patient_id\",) || COALESCE(COALESCE(LENGTH(\"patients\".\"last_name\"),) || COALESCE(django_date_extract(year, \"patients\".\"birth_date\"),),) AS text) AS \"temp_password\"\nFROM \"patients\"\nWHERE \"patients\".\"patient_id\" IN\n    (SELECT DISTINCT U0.\"patient_id\"\n     FROM \"admissions\" U0)\n</code></pre> <pre><code>ormq1 = (\nPatients.objects.filter(admissions__admission_date__isnull=False)\n.values(\npatient_id=F(\"admissions__patient_id\"),\ntemp_password=Cast(\nConcat(\"id\", Length(\"last_name\"), \"birth_date__year\"), CharField()\n),\n)\n.distinct()\n)\nequal(sqlq, ormq1, True)\nprint_sql(ormq1)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT DISTINCT \"admissions\".\"patient_id\" AS \"patient_id\",\n                CAST(COALESCE(\"patients\".\"patient_id\",) || COALESCE(COALESCE(LENGTH(\"patients\".\"last_name\"),) || COALESCE(django_date_extract(year, \"patients\".\"birth_date\"),),) AS text) AS \"temp_password\"\nFROM \"patients\"\nINNER JOIN \"admissions\" ON (\"patients\".\"patient_id\" = \"admissions\".\"patient_id\")\nWHERE \"admissions\".\"admission_date\" IS NOT NULL\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   patient_id |   temp_password |\n|---:|-------------:|----------------:|\n|  0 |            1 |          151978 |\n|  1 |            2 |          271990 |\n|  2 |            3 |          381985 |\n</code></pre>"},{"location":"orms/django/sql-practice-hard/#hard-5","title":"Hard 5","text":"<p>Each admission costs \\$50 for patients without insurance, and \\$10 for patients with insurance. All patients with an even patient_id have insurance.</p> <p>Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group.</p> <pre><code>qstr = \"\"\"\nSELECT has_insurance, SUM(insurance_cost) AS total_insurance_cost\nFROM(\n    SELECT\n      CASE\n        WHEN patient_id % 2 = 0 THEN \"Yes\"\n        ELSE \"No\"\n      END AS has_insurance,\n      CASE\n        WHEN patient_id % 2 = 0 THEN 10\n        ELSE 50\n      END AS insurance_cost\n    FROM admissions\n  )\nGROUP BY has_insurance;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nAdmissions.objects.values(\nhas_insurance=Case(\nWhen(Exact(F(\"id\") % 2, 0), then=Value(\"Yes\")), default=Value(\"No\")\n),\ninsurance_cost=Case(When(Exact(F(\"patient_id\") % 2, 0), then=10), default=50),\n)\n.annotate(total_insurance_cost=Sum(\"insurance_cost\"))\n.values(\"has_insurance\", \"total_insurance_cost\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT CASE\n           WHEN (\"admissions\".\"id\" % 2) = (0) THEN Yes\n           ELSE No\n       END AS \"has_insurance\",\n       SUM(CASE\n               WHEN (\"admissions\".\"patient_id\" % 2) = (0) THEN 10\n               ELSE 50\n           END) AS \"total_insurance_cost\"\nFROM \"admissions\"\nGROUP BY 1,\n         CASE\n             WHEN (\"admissions\".\"patient_id\" % 2) = (0) THEN 10\n             ELSE 50\n         END\n</code></pre> <pre><code>ormq1 = (\nAdmissions.objects.values(has_insurance=Value(\"Yes\"))\n.filter(Exact(F(\"id\")%2, 0))\n.annotate(total_insurance_cost=Count(\"has_insurance\") * 10)\n.values(\"has_insurance\", \"total_insurance_cost\")\n.union(\nAdmissions.objects.values(has_insurance=Value(\"No\"))\n.filter(Exact(F(\"id\")%2, 1))\n.annotate(total_insurance_cost=Count(\"has_insurance\") * 50)\n.values(\"has_insurance\", \"total_insurance_cost\")\n)\n)\nequal(sqlq, ormq1, True)\nprint_sql(ormq1)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT Yes AS \"has_insurance\",\n       (COUNT(Yes) * 10) AS \"total_insurance_cost\"\nFROM \"admissions\"\nWHERE (\"admissions\".\"id\" % 2) = (0)\nUNION\nSELECT No AS \"has_insurance\",\n             (COUNT(No) * 50) AS \"total_insurance_cost\"\nFROM \"admissions\"\nWHERE (\"admissions\".\"id\" % 2) = (1)\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | has_insurance   |   total_insurance_cost |\n|---:|:----------------|-----------------------:|\n|  0 | No              |                   4250 |\n|  1 | Yes             |                    850 |\n</code></pre>"},{"location":"orms/django/sql-practice-hard/#hard-6","title":"Hard 6","text":"<p>Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name</p> <pre><code>qstr = \"\"\"\nSELECT pr.province_name\nFROM patients AS pa\n  JOIN province_names AS pr ON pa.province_id = pr.province_id\nGROUP BY pr.province_name\nHAVING SUM(gender = 'M') &gt; SUM(gender = 'F')\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.values(\"province__name\")\n.annotate(female=Sum(Q(gender=\"F\")), male=Sum(Q(gender=\"M\")))\n.filter(male__gt=F(\"female\"), province__name__isnull=False)\n.values(province_name=F(\"province__name\"))\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"province_names\".\"province_name\" AS \"province_name\"\nFROM \"patients\"\nINNER JOIN \"province_names\" ON (\"patients\".\"province_id\" = \"province_names\".\"province_id\")\nWHERE \"province_names\".\"province_name\" IS NOT NULL\nGROUP BY 1\nHAVING SUM((\"patients\".\"gender\" = M)) &gt; (SUM(\"patients\".\"gender\" = F))\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | province_name   |\n|---:|:----------------|\n|  0 | Manitoba        |\n|  1 | Ontario         |\n|  2 | Quebec          |\n</code></pre>"},{"location":"orms/django/sql-practice-hard/#hard-7","title":"Hard 7","text":"<p>We are looking for a specific patient. Pull all columns for the patient who matches the following criteria: - First_name contains an 'r' after the first two letters. - Identifies their gender as 'F' (We will do 'M') - Born in February, May, or December - Their weight would be between 60kg and 80kg - Their patient_id is an odd number  (We will do even) - They are from the city 'Kingston'  (We will do 'Vancouver')</p> <pre><code>qstr = \"\"\"\nSELECT *\nFROM patients\nWHERE\n  first_name LIKE \"__r%\"\n  AND gender = 'M'\n  AND (\n    CAST(strftime('%m', birth_date) AS INT) IN (2, 5, 12)\n  )\n  AND weight between 60 AND 80\n  AND patient_id % 2 = 0\n  AND city = 'Vancouver'\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.filter(\nExact(F(\"id\") % 2, 0),\nfirst_name__regex=r\"(?i)^\\w{2,}r\\w*$\",\ngender=\"M\",\nbirth_date__month__in=(2, 5, 12),\nweight__range=(60, 80),\ncity=\"Vancouver\",\n)\n).values(patient_id=F(\"id\"), *patient_fields)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"patients\".\"gender\",\n       \"patients\".\"birth_date\",\n       \"patients\".\"city\",\n       \"patients\".\"province_id\",\n       \"patients\".\"allergies\",\n       \"patients\".\"height\",\n       \"patients\".\"weight\",\n       \"patients\".\"patient_id\" AS \"patient_id\"\nFROM \"patients\"\nWHERE ((\"patients\".\"patient_id\" % 2) = (0)\n       AND django_date_extract(month, \"patients\".\"birth_date\") IN (2,\n                                                                   5,\n                                                                   12)\n       AND \"patients\".\"city\" = Vancouver\n       AND \"patients\".\"first_name\" REGEXP (?i)^\\w{2,}r\\w*$\n       AND \"patients\".\"gender\" = M\n       AND \"patients\".\"weight\" BETWEEN 60 AND 80)\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    | first_name   | last_name   | gender   | birth_date   | city      | province_id   | allergies   |   height |   weight |   patient_id |\n|---:|:-------------|:------------|:---------|:-------------|:----------|:--------------|:------------|---------:|---------:|-------------:|\n|  0 | Jared        | Taylor      | M        | 1986-02-20   | Vancouver | BC            |             |      178 |       75 |           34 |\n</code></pre>"},{"location":"orms/django/sql-practice-hard/#hard-8","title":"Hard 8","text":"<p>Show the percent of patients that have 'M' as their gender. Round the answer to the nearest hundreth number and in percent form.</p> <pre><code>qstr = \"\"\"\nSELECT\n  ROUND(\n    CAST(AVG(gender = 'M') as FLOAT)  * 100,\n    2\n  ) || '%' AS pct\nFROM patients\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>class NonAggrAvg(Avg):\ncontains_aggregate = False\normq = Patients.objects.annotate(\npct=Concat(\nCast(\nRound(NonAggrAvg(Q(gender=\"M\"), output_field=FloatField()) * 100, 2),\nCharField(),\n),\nValue(\"%\"),\n)\n).values(\"pct\")\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT COALESCE(CAST(ROUND((AVG(\"patients\".\"gender\" = M) * 100), 2) AS text),) || COALESCE(%,) AS \"pct\"\nFROM \"patients\"\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    | pct   |\n|---:|:------|\n|  0 | 49.5% |\n</code></pre>"},{"location":"orms/django/sql-practice-hard/#hard-9","title":"Hard 9","text":"<p>For each day display the total amount of admissions on that day. Display the amount changed from the previous date.</p> <pre><code>qstr = \"\"\"\nSELECT\n  admission_date,\n  daily_admissions,\n  daily_admissions - prev_admissions AS admission_diff\nFROM (\n    SELECT\n      admission_date,\n      COUNT(*) daily_admissions,\n      LAG(count(*), 1) OVER (\n        ORDER BY\n          admission_date\n      ) AS prev_admissions\n    FROM admissions\n    GROUP BY admission_date\n  )\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nAdmissions.objects.values(\"admission_date\")\n.annotate(daily_admissions=Count(\"patient_id\"))\n.values(\n\"admission_date\",\n\"daily_admissions\",\nadmission_diff=F(\"daily_admissions\") - Window(Lag(\"daily_admissions\")),\n)\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"admissions\".\"admission_date\",\n       COUNT(\"admissions\".\"patient_id\") AS \"daily_admissions\",\n       (COUNT(\"admissions\".\"patient_id\") - LAG(COUNT(\"admissions\".\"patient_id\"), 1) OVER ()) AS \"admission_diff\"\nFROM \"admissions\"\nGROUP BY \"admissions\".\"admission_date\"\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | admission_date   |   daily_admissions |   admission_diff |\n|---:|:-----------------|-------------------:|-----------------:|\n|  0 | 2022-01-01       |                  1 |              nan |\n|  1 | 2022-01-02       |                  1 |                0 |\n|  2 | 2022-01-03       |                  1 |                0 |\n</code></pre>"},{"location":"orms/django/sql-practice-hard/#hard-10","title":"Hard 10","text":"<p>Show the total number of admissions</p> <pre><code>qstr = \"\"\"\nselect province_name\nfrom province_names\norder by\n  province_name = 'Ontario' desc,\n  province_name\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Provinces.objects.order_by(Exact(F(\"name\"), \"Ontario\").desc(), \"name\").values(\nprovince_name=F(\"name\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"province_names\".\"province_name\" AS \"province_name\"\nFROM \"province_names\"\nORDER BY \"province_names\".\"province_name\" = (Ontario) DESC, \"province_names\".\"province_name\" ASC\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | province_name    |\n|---:|:-----------------|\n|  0 | Ontario          |\n|  1 | Alberta          |\n|  2 | British Columbia |\n</code></pre>"},{"location":"orms/django/sql-practice-hard/#hard-11","title":"Hard 11","text":"<p>We need a breakdown for the total amount of admissions each doctor has started each year. Show the doctor_id, doctor_full_name, specialty, year, total_admissions for that year.</p> <pre><code>qstr = \"\"\"\nSELECT\n  doctor_id,\n  first_name || ' ' || last_name AS full_name,\n  speciality,\n  CAST(strftime('%Y', admission_date) AS INT) AS current_year,\n  Count(strftime('%Y', admission_date)) AS patients_attended\nFROM admissions a\n  JOIN doctors d ON a.attending_doctor_id = d.doctor_id\nGROUP BY current_year, doctor_id\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nAdmissions.objects.values(\"admission_date__year\", \"attending_doctor_id\")\n.annotate(patients_attended=Count(\"admission_date__year\"))\n.values(\n\"patients_attended\",\ndoctor_id=F(\"attending_doctor_id\"),\nfull_name=Concat(\n\"attending_doctor__first_name\", Value(\" \"), \"attending_doctor__last_name\"\n),\nspeciality=F(\"attending_doctor__speciality\"),\ncurrent_year=F(\"admission_date__year\"),\n)\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT COUNT(django_date_extract(year, \"admissions\".\"admission_date\")) AS \"patients_attended\",\n       \"admissions\".\"attending_doctor_id\" AS \"doctor_id\",\n       COALESCE(\"doctors\".\"first_name\",) || COALESCE(COALESCE(,) || COALESCE(\"doctors\".\"last_name\",),) AS \"full_name\",\n       \"doctors\".\"speciality\" AS \"speciality\",\n       django_date_extract(year, \"admissions\".\"admission_date\") AS \"current_year\"\nFROM \"admissions\"\nINNER JOIN \"doctors\" ON (\"admissions\".\"attending_doctor_id\" = \"doctors\".\"doctor_id\")\nGROUP BY 2,\n         5,\n         3,\n         4\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   patients_attended |   doctor_id | full_name     | speciality   |   current_year |\n|---:|--------------------:|------------:|:--------------|:-------------|---------------:|\n|  0 |                   8 |           1 | Maggie Chen   | Cardiology   |           2022 |\n|  1 |                   8 |           2 | Karen Wong    | Neurology    |           2022 |\n|  2 |                   7 |           3 | Samuel Nguyen | Dermatology  |           2022 |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/","title":"SQL-PRACTICE medium exercises using Django ORM","text":"<p>https://www.sql-practice.com/</p> <p>This walkalong consists of medium questions and their solutions from sql-practice.com, written in both SQL and django ORM, They query results are also compared for equality. Insert, Update and Delete queries are not included to keep database consistent.</p>"},{"location":"orms/django/sql-practice-medium/#try-it-yourself","title":"Try it yourself","text":"<p>The notebook (Django Shell-plus) is located in here  First cd into the notebook directory <code>cd server/notebook</code> Then open the notebook using <code>python ../manage.py shell_plus --notebook</code> </p> <pre><code>import os\nos.environ[\"DJANGO_ALLOW_ASYNC_UNSAFE\"] = \"true\"\nfrom utils import *\nfrom sqlparse import format\n</code></pre> <pre><code>from django.db.models import (\nQ,\nF,\nCase,\nWhen,\nCount,\nFunc,\nMin,\nMax,\nSum,\nAvg,\nValue,\nOuterRef,\nSubquery,\nCharField,\n)\nfrom django.db.models.functions import Concat, Cast, Round, Length, Upper, Lower\nfrom django.db import connection\nfrom customer_db.models import Provinces, Patients, Doctors, Admissions\n</code></pre> <pre><code>def print_sql(queryset):\nformatted = format(str(queryset.query), reindent=True)\nprint(formatted)\n</code></pre> <pre><code>admission_fields = [\n\"id\",\n\"patient_id\",\n\"admission_date\",\n\"discharge_date\",\n\"diagnosis\",\n\"attending_doctor_id\",\n]\n</code></pre> <pre><code>class NonAggrCount(Count):\n\"\"\"\n    This aggregation will not trigger a group by\n    \"\"\"\ncontains_aggregate = False\nclass NonAggrSum(Sum):\ncontains_aggregate = False\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-1","title":"Medium 1","text":"<p>Show unique birth years from patients and order them by ascending.</p> <pre><code># Use YEAR(birth_date) for most databases\nqstr = \"\"\"\nSELECT\n  DISTINCT strftime('%Y', birth_date) birth_year\nFROM patients\nORDER BY birth_year;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.annotate(birth_year=Cast(F(\"birth_date__year\"), CharField()))\n.distinct()\n.order_by(\"birth_year\")\n.values(\"birth_year\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT DISTINCT CAST(django_date_extract(year, \"patients\".\"birth_date\") AS text) AS \"birth_year\"\nFROM \"patients\"\nORDER BY 1 ASC\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   birth_year |\n|---:|-------------:|\n|  0 |         1975 |\n|  1 |         1976 |\n|  2 |         1977 |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-2","title":"Medium 2","text":"<p>Show unique first names from the patients table which only occurs once in the list.</p> <p>For example, if two or more people are named 'John' in the first_name column then don't include their name in the output list. If only 1 person is named 'Leo' then include them in the output.</p> <pre><code>qstr = \"\"\"\nSELECT first_name\nFROM patients\nGROUP BY first_name\nHAVING COUNT(first_name) = 1\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.values(\"first_name\")\n.annotate(occurance=Count(\"first_name\"))\n.filter(occurance=1)\n.values(\"first_name\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\"\nFROM \"patients\"\nGROUP BY \"patients\".\"first_name\"\nHAVING COUNT(\"patients\".\"first_name\") = 1\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   |\n|---:|:-------------|\n|  0 | Abigail      |\n|  1 | Alicia       |\n|  2 | Allison      |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-3","title":"Medium 3","text":"<p>Show patient_id and first_name from patients where their first_name start and ends with 's' and is at least 6 characters long. We will do start and ends with 'n' and is at least 6 characters long.</p> <pre><code>qstr = \"\"\"\nSELECT\n  patient_id,\n  first_name\nFROM patients\nWHERE first_name LIKe \"n____%n\"\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(first_name__regex=r\"(?i)^n\\w{4,}n$\").values(\n\"first_name\", patient_id=F(\"id\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"patient_id\" AS \"patient_id\"\nFROM \"patients\"\nWHERE \"patients\".\"first_name\" REGEXP (?i)^n\\w{4,}n$\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   |   patient_id |\n|---:|:-------------|-------------:|\n|  0 | Nathan       |           54 |\n|  1 | Nathan       |          100 |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-4","title":"Medium 4","text":"<p>Show patient_id, first_name, last_name from patients whos diagnosis is 'Dementia'. We will do Diabetes. Primary diagnosis is stored in the admissions table.</p> <pre><code>qstr = \"\"\"\nSELECT\n  p.patient_id,\n  first_name,\n  last_name\nFROM patients p\n  INNER JOIN admissions a ON p.patient_id = a.patient_id\nWHERE diagnosis = 'Diabetes'\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Admissions.objects.filter(diagnosis=\"Diabetes\").values(\n\"patient_id\", first_name=F(\"patient__first_name\"), last_name=F(\"patient__last_name\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"admissions\".\"patient_id\",\n       \"patients\".\"first_name\" AS \"first_name\",\n       \"patients\".\"last_name\" AS \"last_name\"\nFROM \"admissions\"\nINNER JOIN \"patients\" ON (\"admissions\".\"patient_id\" = \"patients\".\"patient_id\")\nWHERE \"admissions\".\"diagnosis\" = Diabetes\n</code></pre> <pre><code># Note the result of the ORM query in the next cell is equivalent to that of the last cell,\n# except for the ordering.\nqstr = \"\"\"\nSELECT\n  p.patient_id,\n  first_name,\n  last_name\nFROM patients p\n  INNER JOIN admissions a ON p.patient_id = a.patient_id\nWHERE diagnosis = 'Diabetes'\nORDER BY p.patient_id\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>diabetic_patients = (\nAdmissions.objects.filter(diagnosis=\"Diabetes\").values_list(\"patient_id\").distinct()\n)\normq1 = (\nPatients.objects.filter(id__in=diabetic_patients)\n.values(\"first_name\", \"last_name\", patient_id=F(\"id\"))\n.order_by(\"patient_id\")\n.values(\"patient_id\", \"first_name\", \"last_name\")\n)\nequal(sqlq, ormq1)\nprint_sql(ormq1)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"patients\".\"patient_id\" AS \"patient_id\"\nFROM \"patients\"\nWHERE \"patients\".\"patient_id\" IN\n    (SELECT DISTINCT U0.\"patient_id\"\n     FROM \"admissions\" U0\n     WHERE U0.\"diagnosis\" = Diabetes)\nORDER BY 3 ASC\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   patient_id | first_name   | last_name   |\n|---:|-------------:|:-------------|:------------|\n|  0 |            6 | Gavin        | Bryant      |\n|  1 |           17 | Emily        | Tran        |\n|  2 |           27 | Allison      | Rogers      |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-5","title":"Medium 5","text":"<p>Display every patient's first_name. Order the list by the length of each name and then by alphbetically</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name\nFROM patients p\nORDER BY\n  LENGTH(first_name),\n  first_name;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.order_by(Length(\"first_name\"), \"first_name\").values(\n\"first_name\"\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\"\nFROM \"patients\"\nORDER BY LENGTH(\"patients\".\"first_name\") ASC, \"patients\".\"first_name\" ASC\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   |\n|---:|:-------------|\n|  0 | Eli          |\n|  1 | Eli          |\n|  2 | Eli          |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-6","title":"Medium 6","text":"<p>Show the total amount of male patients and the total amount of female patients in the patients table. Display the two results in the same row.</p> <pre><code>qstr = \"\"\"\nSELECT (\n    SELECT COUNT(gender)\n    FROM patients\n    WHERE gender = 'M'\n  ) AS male, (\n    SELECT COUNT(gender)\n    FROM patients\n    WHERE gender = 'F'\n  ) AS female;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>male_subquery, female_subquery = [\nPatients.objects.filter(gender=g)\n.annotate(**{f\"{g}_count\": Func(F(\"gender\"), function=\"COUNT\")})\n.values(f\"{g}_count\")\nfor g in [\"M\", \"F\"]\n]\normq = Patients.objects.annotate(\nmale=Subquery(male_subquery), female=Subquery(female_subquery)\n).values(\"male\", \"female\")[:1]\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT\n  (SELECT COUNT(U0.\"gender\") AS \"M_count\"\n   FROM \"patients\" U0\n   WHERE U0.\"gender\" = M) AS \"male\",\n\n  (SELECT COUNT(U0.\"gender\") AS \"F_count\"\n   FROM \"patients\" U0\n   WHERE U0.\"gender\" = F) AS \"female\"\nFROM \"patients\"\nLIMIT 1\n</code></pre> <pre><code>ormq = Patients.objects.annotate(\nmale=NonAggrSum(Case(When(gender=\"M\", then=1))),\nfemale=NonAggrSum(Case(When(gender=\"F\", then=1))),\n).values(\"male\", \"female\")\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT SUM(CASE\n               WHEN \"patients\".\"gender\" = M THEN 1\n               ELSE NULL\n           END) AS \"male\",\n       SUM(CASE\n               WHEN \"patients\".\"gender\" = F THEN 1\n               ELSE NULL\n           END) AS \"female\"\nFROM \"patients\"\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    |   male |   female |\n|---:|-------:|---------:|\n|  0 |     50 |       51 |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-7","title":"Medium 7","text":"<p>Show first and last name, allergies from patients which have allergies to either 'Penicillin' or 'Morphine'. Show results ordered ascending by allergies then by first_name then by last_name.</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name,\n  last_name,\n  allergies\nFROM patients\nWHERE\n  allergies IN ('Penicillin', 'Morphine')\nORDER BY\n  allergies,\n  first_name,\n  last_name;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.filter(allergies__in=[\"Penicillin\", \"Morphine\"])\n.values(\"first_name\", \"last_name\", \"allergies\")\n.order_by(\"allergies\", \"first_name\", \"last_name\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"patients\".\"allergies\"\nFROM \"patients\"\nWHERE \"patients\".\"allergies\" IN (Penicillin,\n                                 Morphine)\nORDER BY \"patients\".\"allergies\" ASC,\n         \"patients\".\"first_name\" ASC,\n         \"patients\".\"last_name\" ASC\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    | first_name   | last_name   | allergies   |\n|---:|:-------------|:------------|:------------|\n|  0 | Gavin        | Bryant      | Penicillin  |\n|  1 | Jeremy       | Kim         | Penicillin  |\n|  2 | Trevor       | Baker       | Penicillin  |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-8","title":"Medium 8","text":"<p>Show patient_id, diagnosis from admissions. Find patients admitted multiple times for the same diagnosis.</p> <pre><code>qstr = \"\"\"\nSELECT\n  patient_id,\n  diagnosis\nFROM admissions\nGROUP BY\n  patient_id,\n  diagnosis\nHAVING COUNT(*) &gt; 1\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nAdmissions.objects.values(\"patient_id\", \"diagnosis\")\n.annotate(count=Count(\"patient_id\"))\n.filter(count__gt=1)\n.values(\"patient_id\", \"diagnosis\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"admissions\".\"patient_id\",\n       \"admissions\".\"diagnosis\"\nFROM \"admissions\"\nGROUP BY \"admissions\".\"patient_id\",\n         \"admissions\".\"diagnosis\"\nHAVING COUNT(\"admissions\".\"patient_id\") &gt; 1\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    |   patient_id | diagnosis   |\n|---:|-------------:|:------------|\n|  0 |            5 | Meningitis  |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-9","title":"Medium 9","text":"<p>Show the city and the total number of patients in the city. Order from most to least patients and then by city name ascending.</p> <pre><code>qstr = \"\"\"\nSELECT\n  city,\n  COUNT(*) population\nFROM patients\nGROUP BY city \nORDER BY population DESC, city\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.values(\"city\")\n.annotate(population=Count(\"id\"))\n.order_by(\"-population\", \"city\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"city\",\n       COUNT(\"patients\".\"patient_id\") AS \"population\"\nFROM \"patients\"\nGROUP BY \"patients\".\"city\"\nORDER BY 2 DESC,\n         \"patients\".\"city\" ASC\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    | city      |   population |\n|---:|:----------|-------------:|\n|  0 | Montreal  |           14 |\n|  1 | Calgary   |           13 |\n|  2 | Toronto   |           13 |\n|  3 | Vancouver |           13 |\n|  4 | Halifax   |           12 |\n|  5 | Ottawa    |           12 |\n|  6 | Victoria  |           12 |\n|  7 | Winnipeg  |           12 |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-10","title":"Medium 10","text":"<p>Show first name, last name and role of every person that is either patient or doctor. The roles are either \"Patient\" or \"Doctor\"</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name,\n  last_name,\n  'patient' AS Role\nFROM patients\nUNION ALL\nSELECT\n  first_name,\n  last_name,\n  'doctor' AS Role\nFROM doctors;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.annotate(role=Value(\"patient\", output_field=CharField()))\n.values(\"first_name\", \"last_name\", \"role\")\n.union(\nDoctors.objects.annotate(role=Value(\"doctor\", output_field=CharField())).values(\n\"first_name\", \"last_name\", \"role\"\n),\nall=True,\n)\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\" AS \"col1\",\n       \"patients\".\"last_name\" AS \"col2\",\n       patient AS \"role\"\nFROM \"patients\"\nUNION ALL\nSELECT \"doctors\".\"first_name\" AS \"col1\",\n       \"doctors\".\"last_name\" AS \"col2\",\n       doctor AS \"role\"\nFROM \"doctors\"\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   | last_name   | role    |\n|---:|:-------------|:------------|:--------|\n|  0 | Cheryl       | Mason       | patient |\n|  1 | Jason        | Fleming     | patient |\n|  2 | Tiffany      | McDonald    | patient |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-11","title":"Medium 11","text":"<p>Show all allergies and their occurance ordered by occurance. Remove NULL values from query.</p> <pre><code>qstr = \"\"\"\nSELECT\n  allergies,\n  COUNT (*) AS total_occurance\nFROM patients\nWHERE allergies IS NOT null\nGROUP BY allergies\nORDER BY total_occurance DESC\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.values(\"allergies\")\n.filter(allergies__isnull=False)\n.annotate(total_occurance=Count(\"allergies\"))\n.order_by(\"-total_occurance\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"allergies\",\n       COUNT(\"patients\".\"allergies\") AS \"total_occurance\"\nFROM \"patients\"\nWHERE \"patients\".\"allergies\" IS NOT NULL\nGROUP BY \"patients\".\"allergies\"\nORDER BY 2 DESC\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | allergies   |   total_occurance |\n|---:|:------------|------------------:|\n|  0 | Pollen      |                15 |\n|  1 | Lactose     |                13 |\n|  2 | Sulfa drugs |                 8 |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-12","title":"Medium 12","text":"<p>Show all patient's first_name, last_name, and birth_date who were born in the 1970s decade. Sort the list starting from the earliest birth_date.</p> <pre><code># use YEAR(birth_date) if year function is available\nqstr = \"\"\"\nSELECT\n  first_name,\n  last_name,\n  birth_date\nFROM patients\nWHERE CAST(strftime('%Y', birth_date) AS INT) BETWEEN 1970 AND 1979\nORDER BY birth_date\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.filter(birth_date__year__gte=1970, birth_date__year__lte=1979)\n.order_by(\"birth_date\")\n.values(\"first_name\", \"last_name\", \"birth_date\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"patients\".\"birth_date\"\nFROM \"patients\"\nWHERE (\"patients\".\"birth_date\" &gt;= 1970-01-01\n       AND \"patients\".\"birth_date\" &lt;= 1979-12-31)\nORDER BY \"patients\".\"birth_date\" ASC\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   | last_name   | birth_date   |\n|---:|:-------------|:------------|:-------------|\n|  0 | Jeremy       | Kim         | 1975-07-19   |\n|  1 | Samantha     | Garcia      | 1975-11-30   |\n|  2 | Olivia       | Li          | 1976-03-11   |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-13","title":"Medium 13","text":"<p>We want to display each patient's full name in a single column. Their last_name in all upper letters must appear first, then first_name in all lower case letters. Separate the last_name and first_name with a comma. Order the list by the first_name in decending order EX: SMITH,jane</p> <pre><code>qstr = \"\"\"\nSELECT\n   UPPER(last_name) || ',' || LOWER(first_name) AS full_name\nFROM patients\nORDER BY first_name DESC\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.values(\nfull_name=Concat(Upper(\"last_name\"), Value(\",\"), Lower(\"first_name\"))\n).order_by(\"-first_name\")\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT COALESCE(UPPER(\"patients\".\"last_name\"),) || COALESCE(COALESCE(,,) || COALESCE(LOWER(\"patients\".\"first_name\"),),) AS \"full_name\"\nFROM \"patients\"\nORDER BY \"patients\".\"first_name\" DESC\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | full_name      |\n|---:|:---------------|\n|  0 | NGUYEN,william |\n|  1 | LIU,victor     |\n|  2 | BAKER,trevor   |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-14","title":"Medium 14","text":"<p>Show the province_id(s), sum of height; where the total sum of its patient's height is greater than or equal to 7,000. We will do 3000</p> <pre><code>qstr = \"\"\"\nSELECT\n  province_id,\n  SUM(height) AS sum_height\nFROM patients\nGROUP BY province_id\nHAVING SUM(height) &gt; 3000;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.values(\"province_id\")\n.annotate(sum_height=Sum(\"height\"))\n.filter(sum_height__gt=3000)\n.values(\"province_id\", \"sum_height\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"province_id\",\n       SUM(\"patients\".\"height\") AS \"sum_height\"\nFROM \"patients\"\nGROUP BY \"patients\".\"province_id\"\nHAVING SUM(\"patients\".\"height\") &gt; 3000\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | province_id   |   sum_height |\n|---:|:--------------|-------------:|\n|  0 | BC            |         4357 |\n|  1 | ON            |         4331 |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-15","title":"Medium 15","text":"<p>Show the difference between the largest weight and smallest weight for patients with the last name 'Maroni'. We will do Lee.</p> <pre><code>qstr = \"\"\"\nSELECT\n  (MAX(weight) - MIN(weight)) AS weight_dif\nFROM patients\nWHERE last_name = 'Lee';\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(last_name=\"Lee\").aggregate(\nweight_dif=Max(\"weight\") - Min(\"weight\")\n)\nequal(sqlq, ormq)\n# print_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\n</code></pre> <pre><code>ormq = (\nPatients.objects.filter(last_name=\"Lee\")\n.annotate(\nweight_dif=Func(F(\"weight\"), function=\"MAX\") - Func(F(\"weight\"), function=\"MIN\")\n)\n.values(\"weight_dif\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT (MAX(\"patients\".\"weight\") - MIN(\"patients\".\"weight\")) AS \"weight_dif\"\nFROM \"patients\"\nWHERE \"patients\".\"last_name\" = Lee\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    |   weight_dif |\n|---:|-------------:|\n|  0 |           23 |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-16","title":"Medium 16","text":"<p>Show all of the days of the month (1-31) and how many admission_dates occurred on that day. Sort by the day with most admissions to least admissions.</p> <pre><code>qstr = \"\"\"\nSELECT\n  CAST(strftime('%d', admission_date) as INT) AS month_day,\n  COUNT(patient_id) AS daily_admission\nFROM admissions\nGROUP BY strftime('%d', admission_date)\nORDER BY daily_admission DESC;\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nAdmissions.objects.values(month_day=F(\"admission_date__day\"))\n.annotate(daily_admission=Count(\"id\"))\n.order_by(\"-daily_admission\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT django_date_extract(day, \"admissions\".\"admission_date\") AS \"month_day\",\n       COUNT(\"admissions\".\"id\") AS \"daily_admission\"\nFROM \"admissions\"\nGROUP BY 1\nORDER BY 2 DESC\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   month_day |   daily_admission |\n|---:|------------:|------------------:|\n|  0 |          28 |                 6 |\n|  1 |          18 |                 6 |\n|  2 |          17 |                 6 |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-17","title":"Medium 17","text":"<p>Show all columns for patient_id 54's most recent admission_date.</p> <pre><code>qstr = \"\"\"\nSELECT *\nFROM admissions\nWHERE patient_id = 54 AND admission_date = (\n    SELECT max(admission_date)\n    FROM admissions\n    WHERE patient_id = 54\n  )\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Admissions.objects.filter(\npatient_id=54,\nadmission_date=Admissions.objects.filter(patient_id=54).aggregate(\nmax_admission=Max(\"admission_date\")\n)[\"max_admission\"],\n).values(*admission_fields)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"admissions\".\"id\",\n       \"admissions\".\"patient_id\",\n       \"admissions\".\"admission_date\",\n       \"admissions\".\"discharge_date\",\n       \"admissions\".\"diagnosis\",\n       \"admissions\".\"attending_doctor_id\"\nFROM \"admissions\"\nWHERE (\"admissions\".\"admission_date\" = 2022-06-02\n       AND \"admissions\".\"patient_id\" = 54)\n</code></pre> <pre><code>ormq = Admissions.objects.filter(\npatient_id=54,\nadmission_date=Subquery(\nAdmissions.objects.filter(patient_id=54)\n.annotate(max_admission=Func(F(\"admission_date\"), function=\"Max\"))\n.values(\"max_admission\")\n),\n).values(*admission_fields)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"admissions\".\"id\",\n       \"admissions\".\"patient_id\",\n       \"admissions\".\"admission_date\",\n       \"admissions\".\"discharge_date\",\n       \"admissions\".\"diagnosis\",\n       \"admissions\".\"attending_doctor_id\"\nFROM \"admissions\"\nWHERE (\"admissions\".\"admission_date\" =\n         (SELECT Max(U0.\"admission_date\") AS \"max_admission\"\n          FROM \"admissions\" U0\n          WHERE U0.\"patient_id\" = 54)\n       AND \"admissions\".\"patient_id\" = 54)\n</code></pre> <pre><code>ormq = (\nAdmissions.objects.filter(patient_id=54)\n.order_by(\"-admission_date\")[:1]\n.values(*admission_fields)\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"admissions\".\"id\",\n       \"admissions\".\"patient_id\",\n       \"admissions\".\"admission_date\",\n       \"admissions\".\"discharge_date\",\n       \"admissions\".\"diagnosis\",\n       \"admissions\".\"attending_doctor_id\"\nFROM \"admissions\"\nWHERE \"admissions\".\"patient_id\" = 54\nORDER BY \"admissions\".\"admission_date\" DESC\nLIMIT 1\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   id |   patient_id | admission_date   | discharge_date   | diagnosis   |   attending_doctor_id |\n|---:|-----:|-------------:|:-----------------|:-----------------|:------------|----------------------:|\n|  0 |  154 |           54 | 2022-06-02       | 2022-06-06       | Migraine    |                    11 |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-18","title":"Medium 18","text":"<p>Show patient_id, attending_doctor_id, and diagnosis for admissions that match one of the two criteria: 1. patient_id is an odd number and attending_doctor_id is either 1, 5, or 19. 2. attending_doctor_id contains a 2 and the length of patient_id is 3 characters.</p> <pre><code>qstr = \"\"\"\nSELECT\n  patient_id,\n  attending_doctor_id,\n  diagnosis\nFROM admissions\nWHERE\n  (\n    patient_id % 2 = 1\n    and attending_doctor_id IN (1, 5, 19)\n  )\n  OR (\n    CAST(attending_doctor_id AS varchar) LIKE \"%2%\"\n    AND length(CAST(patient_id AS VARCHAR)) = 2\n  )\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>f1 = Q(attending_doctor_id__in=[1, 5, 19], pi_mod=1)\nf2 = Q(adi_str__icontains=\"2\", pi_len=2)\normq = (\nAdmissions.objects.annotate(\npi_mod=F(\"patient_id\") % 2,\nadi_str=Cast(F(\"attending_doctor_id\"), CharField()),\npi_len=Length(Cast(F(\"patient_id\"), CharField())),\n)\n.filter(f1 | f2)\n.values(\"patient_id\", \"attending_doctor_id\", \"diagnosis\")\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"admissions\".\"patient_id\",\n       \"admissions\".\"attending_doctor_id\",\n       \"admissions\".\"diagnosis\"\nFROM \"admissions\"\nWHERE ((\"admissions\".\"attending_doctor_id\" IN (1,\n                                               5,\n                                               19)\n        AND (\"admissions\".\"patient_id\" % 2) = 1)\n       OR (CAST(\"admissions\".\"attending_doctor_id\" AS text) LIKE %2% ESCAPE '\\'\n           AND LENGTH(CAST(\"admissions\".\"patient_id\" AS text)) = 2))\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   patient_id |   attending_doctor_id | diagnosis   |\n|---:|-------------:|----------------------:|:------------|\n|  0 |           14 |                    20 | Arthritis   |\n|  1 |           15 |                     2 | Bronchitis  |\n|  2 |           25 |                    20 | Asthma      |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-19","title":"Medium 19","text":"<p>Show first_name, last_name, and the total number of admissions attended for each doctor.</p> <p>Every admission has been attended by a doctor.</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name,\n  last_name,\n  COUNT(*) AS patient_count\nFROM admissions\n  JOIN doctors ON attending_doctor_id = doctor_id\nGROUP BY attending_doctor_id\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nAdmissions.objects.values(\"attending_doctor_id\")\n.annotate(patient_count=Count(\"attending_doctor_id\"))\n.values(\n\"patient_count\",\nfirst_name=F(\"attending_doctor_id__first_name\"),\nlast_name=F(\"attending_doctor_id__last_name\"),\n)\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT COUNT(\"admissions\".\"attending_doctor_id\") AS \"patient_count\",\n       \"doctors\".\"first_name\" AS \"first_name\",\n       \"doctors\".\"last_name\" AS \"last_name\"\nFROM \"admissions\"\nINNER JOIN \"doctors\" ON (\"admissions\".\"attending_doctor_id\" = \"doctors\".\"doctor_id\")\nGROUP BY \"admissions\".\"attending_doctor_id\",\n         2,\n         3\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    |   patient_count | first_name   | last_name   |\n|---:|----------------:|:-------------|:------------|\n|  0 |               8 | Maggie       | Chen        |\n|  1 |               8 | Karen        | Wong        |\n|  2 |               7 | Samuel       | Nguyen      |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-20","title":"Medium 20","text":"<p>For each doctor, display their id, full name, and the first and last admission date they attended.</p> <pre><code>qstr = \"\"\"\nSELECT\n  doctor_id,\n  first_name || ' ' || last_name AS full_name,\n  MIN(admission_date) AS min_admission,\n  MAX(admission_date) AS max_admission\nFROM doctors\n  JOIN admissions ON attending_doctor_id = doctor_id\nGROUP BY doctor_id\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nAdmissions.objects.values(\"attending_doctor_id\")\n.annotate(\nmin_admission=Cast(Min(\"admission_date\"), CharField()),\nmax_admission=Cast(Max(\"admission_date\"), CharField()),\n)\n.values(\n\"min_admission\",\n\"max_admission\",\ndoctor_id=F(\"attending_doctor_id\"),\nfull_name=Concat(\nF(\"attending_doctor_id__first_name\"),\nValue(\" \"),\nF(\"attending_doctor_id__last_name\"),\n),\n)\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT CAST(MIN(\"admissions\".\"admission_date\") AS text) AS \"min_admission\",\n       CAST(MAX(\"admissions\".\"admission_date\") AS text) AS \"max_admission\",\n       \"admissions\".\"attending_doctor_id\" AS \"doctor_id\",\n       COALESCE(\"doctors\".\"first_name\",) || COALESCE(COALESCE(,) || COALESCE(\"doctors\".\"last_name\",),) AS \"full_name\"\nFROM \"admissions\"\nINNER JOIN \"doctors\" ON (\"admissions\".\"attending_doctor_id\" = \"doctors\".\"doctor_id\")\nGROUP BY 3,\n         4\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | min_admission   | max_admission   |   doctor_id | full_name     |\n|---:|:----------------|:----------------|------------:|:--------------|\n|  0 | 2022-01-08      | 2022-06-11      |           1 | Maggie Chen   |\n|  1 | 2022-01-15      | 2022-06-18      |           2 | Karen Wong    |\n|  2 | 2022-01-01      | 2022-05-27      |           3 | Samuel Nguyen |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-21","title":"Medium 21","text":"<p>Display the total amount of patients for each province. Order by descending.</p> <pre><code>qstr = \"\"\"\nSELECT\n  pn.province_name,\n  count(patient_id) population\nFROM patients p\n  JOIN province_names pn ON p.province_id = pn.province_id\nGROUP BY pn.province_id\nORDER BY population desc\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.values(\"province\")\n.annotate(population=Count(\"province\"))\n.filter(province__name__isnull=False)\n.order_by(\"-population\")\n.values(\"population\", province_name=F(\"province__name\"))\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT COUNT(\"patients\".\"province_id\") AS \"population\",\n       \"province_names\".\"province_name\" AS \"province_name\"\nFROM \"patients\"\nINNER JOIN \"province_names\" ON (\"patients\".\"province_id\" = \"province_names\".\"province_id\")\nWHERE \"province_names\".\"province_name\" IS NOT NULL\nGROUP BY \"patients\".\"province_id\",\n         2\nORDER BY 1 DESC\n</code></pre> <pre><code>orm_to_df(ormq)\n</code></pre> <pre><code>|    |   population | province_name    |\n|---:|-------------:|:-----------------|\n|  0 |           25 | British Columbia |\n|  1 |           25 | Ontario          |\n|  2 |           14 | Quebec           |\n|  3 |           13 | Alberta          |\n|  4 |           12 | Manitoba         |\n|  5 |           12 | Nova Scotia      |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-22","title":"Medium 22","text":"<p>For every admission, display the patient's full name, their admission diagnosis, and their doctor's full name who diagnosed their problem.</p> <pre><code>qstr = \"\"\"\nSELECT\n  p.first_name || ' ' || p.last_name AS patient_name,\n  diagnosis,\n  d.first_name || ' ' || d.last_name AS doctor_name\nFROM patients p\n  JOIN admissions a ON p.patient_id = a.patient_id\n  JOIN doctors d ON a.attending_doctor_id = d.doctor_id\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Admissions.objects.values(\n\"diagnosis\",\npatient_name=Concat(F(\"patient__first_name\"), Value(\" \"), F(\"patient__last_name\")),\ndoctor_name=Concat(\nF(\"attending_doctor__first_name\"), Value(\" \"), F(\"attending_doctor__last_name\")\n),\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"admissions\".\"diagnosis\",\n       COALESCE(\"patients\".\"first_name\",) || COALESCE(COALESCE(,) || COALESCE(\"patients\".\"last_name\",),) AS \"patient_name\",\n       COALESCE(\"doctors\".\"first_name\",) || COALESCE(COALESCE(,) || COALESCE(\"doctors\".\"last_name\",),) AS \"doctor_name\"\nFROM \"admissions\"\nINNER JOIN \"patients\" ON (\"admissions\".\"patient_id\" = \"patients\".\"patient_id\")\nINNER JOIN \"doctors\" ON (\"admissions\".\"attending_doctor_id\" = \"doctors\".\"doctor_id\")\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | diagnosis   | patient_name     | doctor_name     |\n|---:|:------------|:-----------------|:----------------|\n|  0 | Bronchitis  | Cheryl Mason     | Samuel Nguyen   |\n|  1 | Migraine    | Jason Fleming    | Lisa Tran       |\n|  2 | Pneumonia   | Tiffany McDonald | Catherine Cheng |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-23","title":"Medium 23","text":"<p>display the number of duplicate patients based on their first_name and last_name.</p> <pre><code># use YEAR(birth_date) if year function is available\nqstr = \"\"\"\nSELECT\n  first_name,\n  last_name,\n  count(*) duplicates\nFROM patients\nGROUP BY\n  first_name,\n  last_name\nHAVING COUNT(*) &gt; 1\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = (\nPatients.objects.values(\"first_name\", \"last_name\")\n.annotate(duplicates=Count(\"id\"))\n.filter(duplicates__gt=1)\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       COUNT(\"patients\".\"patient_id\") AS \"duplicates\"\nFROM \"patients\"\nGROUP BY \"patients\".\"first_name\",\n         \"patients\".\"last_name\"\nHAVING COUNT(\"patients\".\"patient_id\") &gt; 1\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | first_name   | last_name   |   duplicates |\n|---:|:-------------|:------------|-------------:|\n|  0 | Emma         | Gagnon      |            2 |\n|  1 | Isaac        | Nguyen      |            2 |\n|  2 | Nora         | Singh       |            2 |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-24","title":"Medium 24","text":"<p>Display patient's full name, height in the units feet rounded to 1 decimal, weight in the unit pounds rounded to 0 decimals, birth_date, gender non abbreviated.</p> <p>Convert CM to feet by dividing by 30.48. Convert KG to pounds by multiplying by 2.205.</p> <pre><code>qstr = \"\"\"\nSELECT\n  first_name || ' ' || last_name AS full_name,\n  ROUND(height / 30.48, 1) AS height_inc,\n  ROUND(weight * 2.205, 0) AS weight_pound,\n  birth_date,\n  CASE\n    WHEN gender = 'M' THEN 'Male'\n    WHEN gender = 'F' THEN 'Female'\n  END AS gender_full\nFROM patients\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.values(\n\"birth_date\",\nfull_name=Concat(F(\"first_name\"), Value(\" \"), F(\"last_name\")),\nheight_inc=Round(F(\"height\") / 30.48, 1),\nweight_pound=Round(F(\"weight\") * 2.205, 0),\ngender_full=Case(\nWhen(gender=\"M\", then=Value(\"Male\")), When(gender=\"F\", then=Value(\"Female\"))\n),\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"birth_date\",\n       COALESCE(\"patients\".\"first_name\",) || COALESCE(COALESCE(,) || COALESCE(\"patients\".\"last_name\",),) AS \"full_name\",\n       ROUND((\"patients\".\"height\" / 30.48), 1) AS \"height_inc\",\n       ROUND((\"patients\".\"weight\" * 2.205), 0) AS \"weight_pound\",\n       CASE\n           WHEN \"patients\".\"gender\" = M THEN Male\n           WHEN \"patients\".\"gender\" = F THEN Female\n           ELSE NULL\n       END AS \"gender_full\"\nFROM \"patients\"\n</code></pre> <pre><code>orm_to_df(ormq[:3])\n</code></pre> <pre><code>|    | birth_date   | full_name        |   height_inc |   weight_pound | gender_full   |\n|---:|:-------------|:-----------------|-------------:|---------------:|:--------------|\n|  0 | 1978-05-14   | Cheryl Mason     |          5.6 |            143 | Female        |\n|  1 | 1990-08-02   | Jason Fleming    |          6.1 |            176 | Male          |\n|  2 | 1985-03-27   | Tiffany McDonald |          5.1 |            128 | Female        |\n</code></pre>"},{"location":"orms/django/sql-practice-medium/#medium-25","title":"Medium 25","text":"<p>Show patient_id, first_name, last_name from patients whose does not have any records in the admissions table. (Their patient_id does not exist in any admissions.patient_id rows.)</p> <pre><code>qstr = \"\"\"\nSELECT\n  patient_id,\n  first_name,\n  last_name\nFROM patients\nWHERE patient_id NOT IN (\n    SELECT patient_id\n    FROM admissions\n  )\n\"\"\"\nsqlq = sql_raw(qstr)\n</code></pre> <pre><code>ormq = Patients.objects.filter(\n~Q(id__in=Subquery(Admissions.objects.values(\"patient_id\")))\n).values(\n\"first_name\",\n\"last_name\",\npatient_id=F(\"id\"),\n)\nequal(sqlq, ormq)\nprint_sql(ormq)\n</code></pre> <pre><code>Equal \u2714\ufe0f\nSELECT \"patients\".\"first_name\",\n       \"patients\".\"last_name\",\n       \"patients\".\"patient_id\" AS \"patient_id\"\nFROM \"patients\"\nWHERE NOT (\"patients\".\"patient_id\" IN\n             (SELECT U0.\"patient_id\"\n              FROM \"admissions\" U0))\n</code></pre> <pre><code>orm_to_df(sqlq)\n</code></pre> <pre><code>|    |   patient_id | first_name   | last_name   |\n|---:|-------------:|:-------------|:------------|\n|  0 |          101 | Edward       | Kenway      |\n</code></pre>"},{"location":"orms/django/w3school/","title":"W3SCHOOL SQL exercises using Django ORM","text":"<p>https://www.w3schools.com/sql/exercise.asp</p> <p>This walkalong consists of W3SCHOOL sql exercise solutions written in both SQL and django ORM, They query results are also compared for equality. The Insert, Update and Delete queries are not included to keep database consistent.</p>"},{"location":"orms/django/w3school/#try-it-yourself","title":"Try it yourself","text":"<p>The notebook (Django Shell-plus) is located in here  First cd into the notebook directory <code>cd server/notebook</code> Then open the notebook using <code>python ../manage.py shell_plus --notebook</code> </p> <p>(Note the preformatted tables are intentional)</p>"},{"location":"orms/django/w3school/#testing-some-basic-queries","title":"Testing some basic queries","text":"<pre><code>sqlq = sql_raw(\"SELECT * FROM Customers limit 3\") \n</code></pre> <pre><code>|    |   customerNumber | customerName               | contactLastName   | contactFirstName   | phone        | addressLine1      | city      | state    |   postalCode | country   |\n|---:|-----------------:|:---------------------------|:------------------|:-------------------|:-------------|:------------------|:----------|:---------|-------------:|:----------|\n|  0 |              103 | Atelier graphique          | Schmitt           | Carine             | 40.32.2555   | 54, rue Royale    | Nantes    |          |        44000 | France    |\n|  1 |              112 | Signal Gift Stores         | King              | Jean               | 7025551838   | 8489 Strong St.   | Las Vegas | NV       |        83030 | USA       |\n|  2 |              114 | Australian Collectors, Co. | Ferguson          | Peter              | 03 9520 4555 | 636 St Kilda Road | Melbourne | Victoria |         3004 | Australia |\n</code></pre> <pre><code>ormq = Customers.objects.values()[:3]\n</code></pre> <pre><code>|    |   customer_number | customer_name              | contact_last_name   | contact_first_name   | phone        | address_line1     | city      | state    |   postal_code | country   |\n|---:|------------------:|:---------------------------|:--------------------|:---------------------|:-------------|:------------------|:----------|:---------|--------------:|:----------|\n|  0 |               103 | Atelier graphique          | Schmitt             | Carine               | 40.32.2555   | 54, rue Royale    | Nantes    |          |         44000 | France    |\n|  1 |               112 | Signal Gift Stores         | King                | Jean                 | 7025551838   | 8489 Strong St.   | Las Vegas | NV       |         83030 | USA       |\n|  2 |               114 | Australian Collectors, Co. | Ferguson            | Peter                | 03 9520 4555 | 636 St Kilda Road | Melbourne | Victoria |          3004 | Australia |\n</code></pre> <pre><code>equal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p>"},{"location":"orms/django/w3school/#select","title":"SELECT","text":""},{"location":"orms/django/w3school/#exercise-1","title":"Exercise 1","text":"<p>Insert the missing statement to get all the columns FROM the Customers table.</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM Customers\")\normq =  Customers.objects.values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name              | contact_last_name   | contact_first_name   | phone        | address_line1     | city      | state    |   postal_code | country   |\n|---:|------------------:|:---------------------------|:--------------------|:---------------------|:-------------|:------------------|:----------|:---------|--------------:|:----------|\n|  0 |               103 | Atelier graphique          | Schmitt             | Carine               | 40.32.2555   | 54, rue Royale    | Nantes    |          |         44000 | France    |\n|  1 |               112 | Signal Gift Stores         | King                | Jean                 | 7025551838   | 8489 Strong St.   | Las Vegas | NV       |         83030 | USA       |\n|  2 |               114 | Australian Collectors, Co. | Ferguson            | Peter                | 03 9520 4555 | 636 St Kilda Road | Melbourne | Victoria |          3004 | Australia |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2","title":"Exercise 2","text":"<p>Write a statement that will SELECT the City column FROM the Customers table.</p> <pre><code>sqlq = sql_raw(\"SELECT city FROM Customers;\")\normq =  Customers.objects.values(\"city\")\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    | city      |\n|---:|:----------|\n|  0 | Nantes    |\n|  1 | Las Vegas |\n|  2 | Melbourne |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-3","title":"Exercise 3","text":"<pre><code>sqlq =  sql_raw(\"SELECT DISTINCT country FROM Customers;\")\normq =  Customers.objects.values(\"country\").distinct()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    | country   |\n|---:|:----------|\n|  0 | France    |\n|  1 | USA       |\n|  2 | Australia |\n</code></pre>"},{"location":"orms/django/w3school/#where","title":"WHERE","text":""},{"location":"orms/django/w3school/#exercise-1_1","title":"Exercise 1","text":"<p>Select all records WHERE the City column has the value \"Berlin\".</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM Customers WHERE city='Berlin';\")\normq =  Customers.objects.filter(city='Berlin').values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name    | contact_last_name   | contact_first_name   | phone       | address_line1   | city   | state   |   postal_code | country   |\n|---:|------------------:|:-----------------|:--------------------|:---------------------|:------------|:----------------|:-------|:--------|--------------:|:----------|\n|  0 |               307 | Der Hund Imports | Andersen            | Mel                  | 030-0074555 | Obere Str. 57   | Berlin |         |         12209 | Germany   |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2_1","title":"Exercise 2","text":"<pre><code>sqlq =  sql_raw(\"SELECT * FROM Customers WHERE NOT city='Berlin';\")\normq =  Customers.objects.exclude(city='Berlin').values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>ormq1 =  Customers.objects.filter(~Q(city=\"Berlin\")).values()\nequal(sqlq, ormq1)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name              | contact_last_name   | contact_first_name   | phone        | address_line1     | city      | state    |   postal_code | country   |\n|---:|------------------:|:---------------------------|:--------------------|:---------------------|:-------------|:------------------|:----------|:---------|--------------:|:----------|\n|  0 |               103 | Atelier graphique          | Schmitt             | Carine               | 40.32.2555   | 54, rue Royale    | Nantes    |          |         44000 | France    |\n|  1 |               112 | Signal Gift Stores         | King                | Jean                 | 7025551838   | 8489 Strong St.   | Las Vegas | NV       |         83030 | USA       |\n|  2 |               114 | Australian Collectors, Co. | Ferguson            | Peter                | 03 9520 4555 | 636 St Kilda Road | Melbourne | Victoria |          3004 | Australia |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-3_1","title":"Exercise 3","text":"<p>Select all records WHERE the Customer_number column has the value 320.</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM Customers WHERE customerNumber='320';\")\normq =  Customers.objects.filter(customer_number=320).values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name       | contact_last_name   | contact_first_name   |      phone | address_line1     | city        | state   |   postal_code | country   |\n|---:|------------------:|:--------------------|:--------------------|:---------------------|-----------:|:------------------|:------------|:--------|--------------:|:----------|\n|  0 |               320 | Mini Creations Ltd. | Huang               | Wing                 | 5085559555 | 4575 Hillside Dr. | New Bedford | MA      |         50553 | USA       |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-4","title":"Exercise 4","text":"<p>Select all records WHERE the City column has the value 'Berlin' and the PostalCode column has the value 12209.</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM customers WHERE city='Berlin' AND postalCode=12209;\")\normq =  Customers.objects.filter(city=\"Berlin\", postal_code=12209).values() \nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name    | contact_last_name   | contact_first_name   | phone       | address_line1   | city   | state   |   postal_code | country   |\n|---:|------------------:|:-----------------|:--------------------|:---------------------|:------------|:----------------|:-------|:--------|--------------:|:----------|\n|  0 |               307 | Der Hund Imports | Andersen            | Mel                  | 030-0074555 | Obere Str. 57   | Berlin |         |         12209 | Germany   |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-5","title":"Exercise 5","text":"<p>Select all records WHERE the City column has the value 'Berlin' or 'London'. </p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM Customers WHERE city='Berlin' OR city='London'\")\normq =  Customers.objects.filter(Q(city=\"Berlin\") | Q(city=\"London\") ).values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name                  | contact_last_name   | contact_first_name   | phone          | address_line1   | city   | state   | postal_code   | country   |\n|---:|------------------:|:-------------------------------|:--------------------|:---------------------|:---------------|:----------------|:-------|:--------|:--------------|:----------|\n|  0 |               307 | Der Hund Imports               | Andersen            | Mel                  | 030-0074555    | Obere Str. 57   | Berlin |         | 12209         | Germany   |\n|  1 |               324 | Stylish Desk Decors, Co.       | Brown               | Ann                  | (171) 555-0297 | 35 King George  | London |         | WX3 6FW       | UK        |\n|  2 |               489 | Double Decker Gift Stores, Ltd | Smith               | Thomas               | (171) 555-7555 | 120 Hanover Sq. | London |         | WA1 1DP       | UK        |\n</code></pre>"},{"location":"orms/django/w3school/#order-by","title":"ORDER BY","text":""},{"location":"orms/django/w3school/#exercise-1_2","title":"Exercise 1","text":"<p>Select all records FROM the Customers table, sort the result alphabetically by the column City.</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM Customers ORDER BY city\")\normq =  Customers.objects.order_by(\"city\").values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name         | contact_last_name   | contact_first_name   | phone           | address_line1    | city      | state   | postal_code   | country     |\n|---:|------------------:|:----------------------|:--------------------|:---------------------|:----------------|:-----------------|:----------|:--------|:--------------|:------------|\n|  0 |               459 | Warburg Exchange      | Ottlieb             | Sven                 | 0241-039123     | Walserweg 21     | Aachen    |         | 52066         | Germany     |\n|  1 |               157 | Diecast Classics Inc. | Leong               | Kelvin               | 2155551555      | 7586 Pompton St. | Allentown | PA      | 70267         | USA         |\n|  2 |               303 | Schuyler Imports      | Schuyler            | Bradley              | +31 20 491 9555 | Kingsfordweg 151 | Amsterdam |         | 1043 GR       | Netherlands |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2_2","title":"Exercise 2","text":"<p>Select all records FROM the Customers table, sort the result reversed alphabetically by the column City.</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM Customers ORDER BY city desc\")\normq =  Customers.objects.order_by(\"-city\").values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name                 | contact_last_name   | contact_first_name   | phone       | address_line1             | city         | state   |   postal_code | country     |\n|---:|------------------:|:------------------------------|:--------------------|:---------------------|:------------|:--------------------------|:-------------|:--------|--------------:|:------------|\n|  0 |               227 | Heintze Collectables          | Ibsen               | Palle                | 86 21 3555  | Smagsloget 45             | \u253crhus        |         |          8200 | Denmark     |\n|  1 |               319 | Mini Classics                 | Frick               | Steve                | 9145554562  | 3758 North Pendale Street | White Plains | NY      |         24067 | USA         |\n|  2 |               412 | Extreme Desk Decorations, Ltd | McRoy               | Sarah                | 04 499 9555 | 101 Lambton Quay          | Wellington   |         |               | New Zealand |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-3_2","title":"Exercise 3","text":"<p>Select all records FROM the Customers table, sort the result alphabetically, first by the column Country, then, by the column City.</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM Customers ORDER BY country, city\")\normq =  Customers.objects.order_by(\"country\", \"city\").values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name                | contact_last_name   | contact_first_name   | phone           | address_line1          | city         | state    |   postal_code | country   |\n|---:|------------------:|:-----------------------------|:--------------------|:---------------------|:----------------|:-----------------------|:-------------|:---------|--------------:|:----------|\n|  0 |               282 | Souveniers And Things Co.    | Huxley              | Adrian               | +61 2 9495 8555 | Monitor Money Building | Chatswood    | NSW      |          2067 | Australia |\n|  1 |               471 | Australian Collectables, Ltd | Clenahan            | Sean                 | 61-9-3844-6555  | 7 Allen Street         | Glen Waverly | Victoria |          3150 | Australia |\n|  2 |               114 | Australian Collectors, Co.   | Ferguson            | Peter                | 03 9520 4555    | 636 St Kilda Road      | Melbourne    | Victoria |          3004 | Australia |\n</code></pre>"},{"location":"orms/django/w3school/#null","title":"NULL","text":""},{"location":"orms/django/w3school/#exercise-1_3","title":"Exercise 1","text":"<p>Select all records FROM the Customers WHERE the PostalCode column is empty.</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM Customers WHERE postalCode IS NULL\")\normq =  Customers.objects.filter(postal_code=None).values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name               | contact_last_name   | contact_first_name   | phone          | address_line1        | city              | state    | postal_code   | country     |\n|---:|------------------:|:----------------------------|:--------------------|:---------------------|:---------------|:---------------------|:------------------|:---------|:--------------|:------------|\n|  0 |               211 | King Kong Collectables, Co. | Gao                 | Mike                 | +852 2251 1555 | Bank of China Tower  | Central Hong Kong |          |               | Hong Kong   |\n|  1 |               323 | Down Under Souveniers, Inc  | Graham              | Mike                 | +64 9 312 5555 | 162-164 Grafton Road | Auckland          |          |               | New Zealand |\n|  2 |               348 | Asian Treasures, Inc.       | McKenna             | Patricia             | 2967 555       | 8 Johnstown Road     | Cork              | Co. Cork |               | Ireland     |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2_3","title":"Exercise 2","text":"<p>Select all records FROM the Customers WHERE the PostalCode column is NOT empty.</p> <pre><code>sqlq = sql_raw(\"SELECT * FROM Customers WHERE postalCode IS NOT NULL\")\normq = Customers.objects.exclude(postal_code=None).values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>ormq1 =  Customers.objects.filter(~Q(postal_code=None)).values()\nequal(sqlq, ormq1)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>ormq2 =  Customers.objects.filter(postal_code__isnull=False).values()\nequal(sqlq, ormq2)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name              | contact_last_name   | contact_first_name   | phone        | address_line1     | city      | state    |   postal_code | country   |\n|---:|------------------:|:---------------------------|:--------------------|:---------------------|:-------------|:------------------|:----------|:---------|--------------:|:----------|\n|  0 |               103 | Atelier graphique          | Schmitt             | Carine               | 40.32.2555   | 54, rue Royale    | Nantes    |          |         44000 | France    |\n|  1 |               112 | Signal Gift Stores         | King                | Jean                 | 7025551838   | 8489 Strong St.   | Las Vegas | NV       |         83030 | USA       |\n|  2 |               114 | Australian Collectors, Co. | Ferguson            | Peter                | 03 9520 4555 | 636 St Kilda Road | Melbourne | Victoria |          3004 | Australia |\n</code></pre>"},{"location":"orms/django/w3school/#function","title":"FUNCTION","text":""},{"location":"orms/django/w3school/#exercise-1_4","title":"Exercise 1","text":"<p>Use the MIN function to SELECT the record with the smallest value of the Price column.</p> <pre><code>sqlq = sql_raw(\"SELECT MIN(buyPrice) mn FROM products\")\normq =  Products.objects.aggregate(mn=Min('buy_price')) \nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |    mn |\n|---:|------:|\n|  0 | 15.91 |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2_4","title":"Exercise 2","text":"<p>Use an SQL function to SELECT the record with the highest value of the Price column.</p> <pre><code>sqlq = sql_raw(\"SELECT MAX(buyPrice) mn FROM products\")\normq = Products.objects.aggregate(mn=Max('buy_price'))\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |     mn |\n|---:|-------:|\n|  0 | 103.42 |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-3_3","title":"Exercise 3","text":"<p>Use the correct function to return the number of records that have the Price value set to 15.91. We will do product_scale = '1:10' instead as I couldn't find any duplicate price.</p> <pre><code>sqlq = sql_raw(\"SELECT COUNT(*) cnt FROM products WHERE productScale='1:10'\")\normq = Products.objects.filter(product_scale='1:10').aggregate(cnt=Count(\"product_code\"))\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>ormq1 = Products.objects.filter(product_scale='1:10').count()\normq1 = [{'cnt':ormq1}]\nequal(sqlq, ormq1)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   cnt |\n|---:|------:|\n|  0 |     6 |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-4_1","title":"Exercise 4","text":"<p>Use an SQL function to calculate the average price of all products.</p> <pre><code>sqlq = sql_raw(\"SELECT AVG(buyPrice) mean FROM products;\")\normq = Products.objects.aggregate(mean=Avg('buy_price'))\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |    mean |\n|---:|--------:|\n|  0 | 54.3952 |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-5_1","title":"Exercise 5","text":"<p>Use an SQL function to calculate the sum of all the Price column values in the Products table.</p> <pre><code>sqlq = sql_raw(\"SELECT SUM(buyPrice) sum_ FROM products;\")\normq = Products.objects.aggregate(sum_=Sum('buy_price'))\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |    sum_ |\n|---:|--------:|\n|  0 | 5983.47 |\n</code></pre>"},{"location":"orms/django/w3school/#like","title":"LIKE","text":""},{"location":"orms/django/w3school/#exercise-1_5","title":"Exercise 1","text":"<p>Select all records WHERE the value of the City column starts with the letter \"a\".</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM customers WHERE city LIKE 'a%'\")\normq =  Customers.objects.filter(city__istartswith='a').values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name              | contact_last_name   | contact_first_name   | phone           | address_line1        | city      | state   | postal_code   | country     |\n|---:|------------------:|:---------------------------|:--------------------|:---------------------|:----------------|:---------------------|:----------|:--------|:--------------|:------------|\n|  0 |               157 | Diecast Classics Inc.      | Leong               | Kelvin               | 2155551555      | 7586 Pompton St.     | Allentown | PA      | 70267         | USA         |\n|  1 |               303 | Schuyler Imports           | Schuyler            | Bradley              | +31 20 491 9555 | Kingsfordweg 151     | Amsterdam |         | 1043 GR       | Netherlands |\n|  2 |               323 | Down Under Souveniers, Inc | Graham              | Mike                 | +64 9 312 5555  | 162-164 Grafton Road | Auckland  |         |               | New Zealand |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2_5","title":"Exercise 2","text":"<p>Select all records WHERE the value of the City column ends with the letter \"a\".</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM customers WHERE city LIKE '%a'\")\normq =  Customers.objects.filter(city__iendswith='a').values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name      | contact_last_name   | contact_first_name   | phone         | address_line1          | city     | state   | postal_code   | country   |\n|---:|------------------:|:-------------------|:--------------------|:---------------------|:--------------|:-----------------------|:---------|:--------|:--------------|:----------|\n|  0 |               125 | Havel &amp; Zbyszek Co | Piestrzeniewicz     | Zbyszek              | (26) 642-7555 | ul. Filtrowa 68        | Warszawa |         | 01-012        | Poland    |\n|  1 |               169 | Porto Imports Co.  | de Castro           | Isabel               | (1) 356-5555  | Estrada da sa\u00b7de n. 58 | Lisboa   |         | 1756          | Portugal  |\n|  2 |               205 | Toys4GrownUps.com  | Young               | Julie                | 6265557265    | 78934 Hillside Dr.     | Pasadena | CA      | 90003         | USA       |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-3_4","title":"Exercise 3","text":"<p>Select all records WHERE the value of the City column contains the letter \"a\".</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM customers WHERE city LIKE '%a%'\")\normq =  Customers.objects.filter(city__icontains='a').values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name      | contact_last_name   | contact_first_name   | phone      | address_line1                | city      | state   |   postal_code | country   |\n|---:|------------------:|:-------------------|:--------------------|:---------------------|:-----------|:-----------------------------|:----------|:--------|--------------:|:----------|\n|  0 |               103 | Atelier graphique  | Schmitt             | Carine               | 40.32.2555 | 54, rue Royale               | Nantes    |         |         44000 | France    |\n|  1 |               112 | Signal Gift Stores | King                | Jean                 | 7025551838 | 8489 Strong St.              | Las Vegas | NV      |         83030 | USA       |\n|  2 |               119 | La Rochelle Gifts  | Labrune             | Janine               | 40.67.8555 | 67, rue des Cinquante Otages | Nantes    |         |         44000 | France    |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-4_2","title":"Exercise 4","text":"<p>Select all records WHERE the value of the City column starts with letter \"a\" and ends with the letter \"b\". (Note no such rows exists, so we will use L%n</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM customers WHERE city LIKE 'L%n'\")\normq =  Customers.objects.filter(Q(city__istartswith='L') &amp; Q(city__endswith='n')).values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>ormq1 =  Customers.objects.filter(city__regex=r\"^L.*n$\").values()\nequal(sqlq, ormq1)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name                  | contact_last_name   | contact_first_name   | phone          | address_line1      | city   | state   | postal_code   | country   |\n|---:|------------------:|:-------------------------------|:--------------------|:---------------------|:---------------|:-------------------|:-------|:--------|:--------------|:----------|\n|  0 |               146 | Saveley &amp; Henriot, Co.         | Saveley             | Mary                 | 78.32.5555     | 2, rue du Commerce | Lyon   |         | 69004         | France    |\n|  1 |               324 | Stylish Desk Decors, Co.       | Brown               | Ann                  | (171) 555-0297 | 35 King George     | London |         | WX3 6FW       | UK        |\n|  2 |               489 | Double Decker Gift Stores, Ltd | Smith               | Thomas               | (171) 555-7555 | 120 Hanover Sq.    | London |         | WA1 1DP       | UK        |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-5_2","title":"Exercise 5","text":"<p>Select all records WHERE the value of the City column does NOT start with the letter \"a\".</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM customers WHERE city NOT LIKE 'a%'\")\normq =  Customers.objects.exclude(city__istartswith='a').values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>ormq1 =  Customers.objects.filter(city__regex=r\"^[^aA]\").values()\nequal(sqlq, ormq1)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>ormq2 =  Customers.objects.filter(~Q(city__istartswith='a')).values()\nequal(sqlq, ormq2)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name              | contact_last_name   | contact_first_name   | phone        | address_line1     | city      | state    |   postal_code | country   |\n|---:|------------------:|:---------------------------|:--------------------|:---------------------|:-------------|:------------------|:----------|:---------|--------------:|:----------|\n|  0 |               103 | Atelier graphique          | Schmitt             | Carine               | 40.32.2555   | 54, rue Royale    | Nantes    |          |         44000 | France    |\n|  1 |               112 | Signal Gift Stores         | King                | Jean                 | 7025551838   | 8489 Strong St.   | Las Vegas | NV       |         83030 | USA       |\n|  2 |               114 | Australian Collectors, Co. | Ferguson            | Peter                | 03 9520 4555 | 636 St Kilda Road | Melbourne | Victoria |          3004 | Australia |\n</code></pre>"},{"location":"orms/django/w3school/#wildcards","title":"WILDCARDS","text":""},{"location":"orms/django/w3school/#exercise-1_6","title":"Exercise 1","text":"<p>Select all records WHERE the second letter of the City is an \"a\".</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM customers WHERE city LIKE '_a%'\")\normq =  Customers.objects.filter(city__regex=r\"^.[aA].*$\").values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name      | contact_last_name   | contact_first_name   | phone      | address_line1                | city      | state   |   postal_code | country   |\n|---:|------------------:|:-------------------|:--------------------|:---------------------|:-----------|:-----------------------------|:----------|:--------|--------------:|:----------|\n|  0 |               103 | Atelier graphique  | Schmitt             | Carine               | 40.32.2555 | 54, rue Royale               | Nantes    |         |         44000 | France    |\n|  1 |               112 | Signal Gift Stores | King                | Jean                 | 7025551838 | 8489 Strong St.              | Las Vegas | NV      |         83030 | USA       |\n|  2 |               119 | La Rochelle Gifts  | Labrune             | Janine               | 40.67.8555 | 67, rue des Cinquante Otages | Nantes    |         |         44000 | France    |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2_6","title":"Exercise 2","text":"<p>Select all records WHERE the first letter of the City is an \"a\" or a \"c\" or an \"s\".</p> <pre><code># sqlq =  Customers.objects.raw(\"SELECT * FROM customers WHERE city LIKE '[acs]%'\")\nsqlq =  sql_raw(\"SELECT * FROM customers WHERE CITY LIKE 'a%' OR CITY LIKE 'c%' OR CITY LIKE 's%'\")\nquery = Q()\nfor ch in ['a','c','s']:\nquery = query | Q(city__istartswith=ch)\normq =  Customers.objects.filter(query).values()\nequal(sqlq, ormq) \n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>ormq1 =  Customers.objects.filter(city__regex=r\"^[acsACS].*$\").values()\nequal(sqlq, ormq1)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name                | contact_last_name   | contact_first_name   | phone      | address_line1             | city          | state   |   postal_code | country   |\n|---:|------------------:|:-----------------------------|:--------------------|:---------------------|:-----------|:--------------------------|:--------------|:--------|--------------:|:----------|\n|  0 |               121 | Baane Mini Imports           | Bergulfsen          | Jonas                | 07-98 9555 | Erling Skakkes gate 78    | Stavern       |         |          4110 | Norway    |\n|  1 |               124 | Mini Gifts Distributors Ltd. | Nelson              | Susan                | 4155551450 | 5677 Strong St.           | San Rafael    | CA      |         97562 | USA       |\n|  2 |               129 | Mini Wheels Co.              | Murphy              | Julie                | 6505555787 | 5557 North Pendale Street | San Francisco | CA      |         94217 | USA       |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-3_5","title":"Exercise 3","text":"<p>Select all records WHERE the first letter of the City starts with anything FROM an \"a\" to an \"f\".</p> <pre><code># sqlq =  Customers.objects.raw(\"SELECT * FROM customers WHERE city LIKE '[a-f]%'\") # doesnt work in sqlite\nsqlq =  sql_raw(\"SELECT * FROM customers WHERE city REGEXP '^[a-fA-F].*$'\")\normq =  Customers.objects.filter(city__regex=r\"^[a-fA-F].*$\").values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name         | contact_last_name   | contact_first_name   | phone             | address_line1     | city       | state   |   postal_code | country   |\n|---:|------------------:|:----------------------|:--------------------|:---------------------|:------------------|:------------------|:-----------|:--------|--------------:|:----------|\n|  0 |               128 | Blauer See Auto, Co.  | Keitel              | Roland               | +49 69 66 90 2555 | Lyonerstr. 34     | Frankfurt  |         |         60528 | Germany   |\n|  1 |               157 | Diecast Classics Inc. | Leong               | Kelvin               | 2155551555        | 7586 Pompton St.  | Allentown  | PA      |         70267 | USA       |\n|  2 |               161 | Technics Stores Inc.  | Hashimoto           | Juri                 | 6505556809        | 9408 Furth Circle | Burlingame | CA      |         94217 | USA       |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-4_3","title":"Exercise 4","text":"<p>Select all records WHERE the first letter of the City is NOT an \"a\" or a \"c\" or an \"f\".</p> <pre><code># sqlq =  Customers.objects.raw(\"SELECT * FROM customers WHERE city LIKE '[!acf]%'\")\nsqlq =  sql_raw(\"SELECT * FROM customers WHERE CITY NOT LIKE 'a%' OR CITY NOT LIKE 'c%' OR CITY NOT LIKE 's%'\")\nquery = Q()\nfor ch in ['a','c','d']:\nquery = query | ~Q(city__istartswith=ch)\normq =  Customers.objects.filter(query).values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name              | contact_last_name   | contact_first_name   | phone        | address_line1     | city      | state    |   postal_code | country   |\n|---:|------------------:|:---------------------------|:--------------------|:---------------------|:-------------|:------------------|:----------|:---------|--------------:|:----------|\n|  0 |               103 | Atelier graphique          | Schmitt             | Carine               | 40.32.2555   | 54, rue Royale    | Nantes    |          |         44000 | France    |\n|  1 |               112 | Signal Gift Stores         | King                | Jean                 | 7025551838   | 8489 Strong St.   | Las Vegas | NV       |         83030 | USA       |\n|  2 |               114 | Australian Collectors, Co. | Ferguson            | Peter                | 03 9520 4555 | 636 St Kilda Road | Melbourne | Victoria |          3004 | Australia |\n</code></pre>"},{"location":"orms/django/w3school/#in","title":"IN","text":""},{"location":"orms/django/w3school/#exercise-1_7","title":"Exercise 1","text":"<p>Use the IN operator to SELECT all the records WHERE Country is either \"Norway\" or \"France\".</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM customers WHERE country IN ('Norway', 'France')\")\normq =  Customers.objects.filter(country__in=['Norway', 'France']).values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name      | contact_last_name   | contact_first_name   | phone      | address_line1                | city    | state   |   postal_code | country   |\n|---:|------------------:|:-------------------|:--------------------|:---------------------|:-----------|:-----------------------------|:--------|:--------|--------------:|:----------|\n|  0 |               103 | Atelier graphique  | Schmitt             | Carine               | 40.32.2555 | 54, rue Royale               | Nantes  |         |         44000 | France    |\n|  1 |               119 | La Rochelle Gifts  | Labrune             | Janine               | 40.67.8555 | 67, rue des Cinquante Otages | Nantes  |         |         44000 | France    |\n|  2 |               121 | Baane Mini Imports | Bergulfsen          | Jonas                | 07-98 9555 | Erling Skakkes gate 78       | Stavern |         |          4110 | Norway    |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2_7","title":"Exercise 2","text":"<p>Use the IN operator to SELECT all the records WHERE Country is NOT \"Norway\" and NOT \"France\".</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM customers WHERE country NOT IN ('Norway', 'France')\")\normq =  Customers.objects.exclude(country__in=['Norway', 'France']).values()\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>ormq1 =  Customers.objects.filter(~Q(country__in=['Norway', 'France'])).values()\nequal(sqlq, ormq1)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name                | contact_last_name   | contact_first_name   | phone        | address_line1     | city       | state    |   postal_code | country   |\n|---:|------------------:|:-----------------------------|:--------------------|:---------------------|:-------------|:------------------|:-----------|:---------|--------------:|:----------|\n|  0 |               112 | Signal Gift Stores           | King                | Jean                 | 7025551838   | 8489 Strong St.   | Las Vegas  | NV       |         83030 | USA       |\n|  1 |               114 | Australian Collectors, Co.   | Ferguson            | Peter                | 03 9520 4555 | 636 St Kilda Road | Melbourne  | Victoria |          3004 | Australia |\n|  2 |               124 | Mini Gifts Distributors Ltd. | Nelson              | Susan                | 4155551450   | 5677 Strong St.   | San Rafael | CA       |         97562 | USA       |\n</code></pre>"},{"location":"orms/django/w3school/#between","title":"BETWEEN","text":""},{"location":"orms/django/w3school/#exercise-1_8","title":"Exercise 1","text":"<p>Use the BETWEEN operator to SELECT all the records WHERE the value of the Price column is between 10 and 20.</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM products WHERE buyPrice BETWEEN 10 AND 20;\")\normq =  Products.objects.filter(Q(buy_price__gte=10) &amp; Q(buy_price__lte=20)).values()\nequal(sqlq, ormq) \n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    | product_code   | product_name                        | product_scale   | product_vendor           | product_description                                                                                                                                                                                                                                  |   quantity_in_stock |   buy_price |   msrp |\n|---:|:---------------|:------------------------------------|:----------------|:-------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------:|------------:|-------:|\n|  0 | S24_2840       | 1958 Chevy Corvette Limited Edition | 1:24            | Carousel DieCast Legends | The operating parts of this 1958 Chevy Corvette Limited Edition are particularly delicate due to their precise scale and require special care and attention. Features rotating wheels, working streering, opening doors and trunk. Color dark green. |                2542 |       15.91 |  35.36 |\n|  1 | S24_2972       | 1982 Lamborghini Diablo             | 1:24            | Second Gear Diecast      | This replica features opening doors, superb detail and craftsmanship, working steering system, opening forward compartment, opening rear trunk with removable spare, 4 wheel independent spring suspension as well as factory baked enamel finish.   |                7723 |       16.24 |  37.76 |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2_8","title":"Exercise 2","text":"<p>Use the BETWEEN operator to select all the records where the value of the Price column is NOT between 10 and 20.</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM products WHERE buyPrice NOT BETWEEN 10 AND 20;\")\normq =  Products.objects.filter(~Q(buy_price__gte=10) | ~Q(buy_price__lte=20)).values()\nequal(sqlq, ormq) \n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    | product_code   | product_name                          | product_scale   | product_vendor           | product_description                                                                                                                                                                                                                                                                                                                                                                                     |   quantity_in_stock |   buy_price |   msrp |\n|---:|:---------------|:--------------------------------------|:----------------|:-------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------:|------------:|-------:|\n|  0 | S10_1678       | 1969 Harley Davidson Ultimate Chopper | 1:10            | Min Lin Diecast          | This replica features working kickstand, front suspension, gear-shift lever, footbrake lever, drive chain, wheels and steering. All parts are particularly delicate due to their precise scale and require special care and attention.                                                                                                                                                                  |                7933 |       48.81 |  95.7  |\n|  1 | S10_1949       | 1952 Alpine Renault 1300              | 1:10            | Classic Metal Creations  | Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.                                                                                                                                                                                                                                                         |                7305 |       98.58 | 214.3  |\n|  2 | S10_2016       | 1996 Moto Guzzi 1100i                 | 1:10            | Highway 66 Mini Classics | Official Moto Guzzi logos and insignias, saddle bags located on side of motorcycle, detailed engine, working steering, working suspension, two leather seats, luggage rack, dual exhaust pipes, small saddle bag located on handle bars, two-tone paint with chrome accents, superior die-cast detail , rotating wheels , working kick stand, diecast metal with plastic parts and baked enamel finish. |                6625 |       68.99 | 118.94 |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-3_6","title":"Exercise 3","text":"<p>Use the BETWEEN operator to SELECT all the records WHERE the value of the ProductName column is alphabetically between '1904 Buick Runabout' and '1928 Mercedes-Benz SSK'.</p> <pre><code>sqlq =  sql_raw(\"SELECT * FROM products WHERE productName BETWEEN '1904 Buick Runabout' AND '1928 Mercedes-Benz SSK';\")\normq =  Products.objects.filter(Q(product_name__gte='1904 Buick Runabout') &amp; Q(product_name__lte='1928 Mercedes-Benz SSK')).values()\nequal(sqlq, ormq) \n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    | product_code   | product_name             | product_scale   | product_vendor            | product_description                                                                                                                                                                                                                                                                                       |   quantity_in_stock |   buy_price |   msrp |\n|---:|:---------------|:-------------------------|:----------------|:--------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------:|------------:|-------:|\n|  0 | S18_1749       | 1917 Grand Touring Sedan | 1:18            | Welly Diecast Productions | This 1:18 scale replica of the 1917 Grand Touring car has all the features you would expect from museum quality reproductions: all four doors and bi-fold hood opening, detailed engine and instrument panel, chrome-look trim, and tufted upholstery, all topped off with a factory baked-enamel finish. |                2724 |       86.7  | 170    |\n|  1 | S18_2248       | 1911 Ford Town Car       | 1:18            | Motor City Art Classics   | Features opening hood, opening doors, opening trunk, wide white wall tires, front door arm rests, working steering system.                                                                                                                                                                                |                 540 |       33.3  |  60.54 |\n|  2 | S18_2432       | 1926 Ford Fire Engine    | 1:18            | Carousel DieCast Legends  | Gleaming red handsome appearance. Everything is here the fire hoses, ladder, axes, bells, lanterns, ready to fight any inferno.                                                                                                                                                                           |                2018 |       24.92 |  60.77 |\n</code></pre>"},{"location":"orms/django/w3school/#alias","title":"ALIAS","text":""},{"location":"orms/django/w3school/#exercise-1_9","title":"Exercise 1","text":"<p>When displaying the Customers table, make an ALIAS of the PostalCode column, the column should be called Pno instead.</p> <pre><code>sqlq =  sql_raw(\"SELECT customerName, addressLine1, postalCode pno FROM customers;\")\normq =  Customers.objects.values(\"customer_name\", \"address_line1\", pno=F(\"postal_code\"))\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    | customer_name              | address_line1     |   pno |\n|---:|:---------------------------|:------------------|------:|\n|  0 | Atelier graphique          | 54, rue Royale    | 44000 |\n|  1 | Signal Gift Stores         | 8489 Strong St.   | 83030 |\n|  2 | Australian Collectors, Co. | 636 St Kilda Road |  3004 |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2_9","title":"Exercise 2","text":"<p>When displaying the Customers table, refer to the table as Consumers instead of Customers.</p> <pre><code># Couldn't find an answer\n</code></pre>"},{"location":"orms/django/w3school/#join","title":"JOIN","text":""},{"location":"orms/django/w3school/#exercise-1_10","title":"Exercise 1","text":"<p>Insert the missing parts in the JOIN clause to join the two tables Orders and Customers, using the CustomerID field in both tables as the relationship between the two tables.</p> <p><code>select_related</code> is unnecessary in these following queries, because we are manually specifying all the fields from both tables. However it is kept as a guidance see select_related</p> <pre><code>q = \"\"\"\nSelect * FROM orders o\nLEFT OUTER JOIN customers c\non o.customerNumber == c.customerNumber\n\"\"\"\nsqlq =  sql_raw(q)\n</code></pre> <pre><code>(326, 16)\n|    |   orderNumber | orderDate   | requiredDate   | shippedDate   | status   | comments               |   customerNumber | customerName                 | contactLastName   | contactFirstName   | phone             | addressLine1             | city      | state   |   postalCode | country   |\n|---:|--------------:|:------------|:---------------|:--------------|:---------|:-----------------------|-----------------:|:-----------------------------|:------------------|:-------------------|:------------------|:-------------------------|:----------|:--------|-------------:|:----------|\n|  0 |         10100 | 2003-01-06  | 2003-01-13     | 2003-01-10    | Shipped  |                        |              363 | Online Diecast Creations Co. | Young             | Dorothy            | 6035558647        | 2304 Long Airport Avenue | Nashua    | NH      |        62005 | USA       |\n|  1 |         10101 | 2003-01-09  | 2003-01-18     | 2003-01-11    | Shipped  | Check on availability. |              128 | Blauer See Auto, Co.         | Keitel            | Roland             | +49 69 66 90 2555 | Lyonerstr. 34            | Frankfurt |         |        60528 | Germany   |\n</code></pre> <pre><code>def get_all_join_fields(lh_class, rh_class, fk):\nlh_class_fields = [field.name for field in lh_class._meta.local_fields]\nrh_class_fields =  {field.name: F(f\"{fk}__{field.name}\") for field in rh_class._meta.local_fields if field.name not in lh_class_fields}\nreturn lh_class_fields, rh_class_fields\n</code></pre> <pre><code>lh_fields, rh_field_dict = get_all_join_fields(Orders, Customers, 'customer_number')\n# this will perform an inner join because customer_number is non nullable\normq =  Orders.objects.select_related('customer_number').values( *lh_fields, **rh_field_dict)\n</code></pre> <pre><code>equal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   order_number | order_date   | required_date   | shipped_date   | status   | comments               |   customer_number | customer_name                | contact_last_name   | contact_first_name   | phone             | address_line1            | city      | state   |   postal_code | country   |\n|---:|---------------:|:-------------|:----------------|:---------------|:---------|:-----------------------|------------------:|:-----------------------------|:--------------------|:---------------------|:------------------|:-------------------------|:----------|:--------|--------------:|:----------|\n|  0 |          10100 | 2003-01-06   | 2003-01-13      | 2003-01-10     | Shipped  |                        |               363 | Online Diecast Creations Co. | Young               | Dorothy              | 6035558647        | 2304 Long Airport Avenue | Nashua    | NH      |         62005 | USA       |\n|  1 |          10101 | 2003-01-09   | 2003-01-18      | 2003-01-11     | Shipped  | Check on availability. |               128 | Blauer See Auto, Co.         | Keitel              | Roland               | +49 69 66 90 2555 | Lyonerstr. 34            | Frankfurt |         |         60528 | Germany   |\n|  2 |          10102 | 2003-01-10   | 2003-01-18      | 2003-01-14     | Shipped  |                        |               181 | Vitachrome Inc.              | Frick               | Michael              | 2125551500        | 2678 Kingston Rd.        | NYC       | NY      |         10022 | USA       |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2_10","title":"Exercise 2","text":"<p>Choose the correct JOIN clause to SELECT all records FROM the two tables WHERE there is a match in both tables.</p> <pre><code>q = \"\"\"\nSelect * FROM orders o\nINNER JOIN customers c\non o.customerNumber == c.customerNumber\n\"\"\"\nsqlq =  sql_raw(q)\n</code></pre> <pre><code>(326, 16)\n|    |   orderNumber | orderDate   | requiredDate   | shippedDate   | status   | comments               |   customerNumber | customerName                 | contactLastName   | contactFirstName   | phone             | addressLine1             | city      | state   |   postalCode | country   |\n|---:|--------------:|:------------|:---------------|:--------------|:---------|:-----------------------|-----------------:|:-----------------------------|:------------------|:-------------------|:------------------|:-------------------------|:----------|:--------|-------------:|:----------|\n|  0 |         10100 | 2003-01-06  | 2003-01-13     | 2003-01-10    | Shipped  |                        |              363 | Online Diecast Creations Co. | Young             | Dorothy            | 6035558647        | 2304 Long Airport Avenue | Nashua    | NH      |        62005 | USA       |\n|  1 |         10101 | 2003-01-09  | 2003-01-18     | 2003-01-11    | Shipped  | Check on availability. |              128 | Blauer See Auto, Co.         | Keitel            | Roland             | +49 69 66 90 2555 | Lyonerstr. 34            | Frankfurt |         |        60528 | Germany   |\n</code></pre> <pre><code>lh_fields, rh_field_dict = get_all_join_fields(Orders, Customers, 'customer_number')\normq =  Orders.objects.filter(customer_number__isnull=False)\\\n.select_related('customer_number').values( *lh_fields, **rh_field_dict)\n</code></pre> <pre><code>equal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   order_number | order_date   | required_date   | shipped_date   | status   | comments               |   customer_number | customer_name                | contact_last_name   | contact_first_name   | phone             | address_line1            | city      | state   |   postal_code | country   |\n|---:|---------------:|:-------------|:----------------|:---------------|:---------|:-----------------------|------------------:|:-----------------------------|:--------------------|:---------------------|:------------------|:-------------------------|:----------|:--------|--------------:|:----------|\n|  0 |          10100 | 2003-01-06   | 2003-01-13      | 2003-01-10     | Shipped  |                        |               363 | Online Diecast Creations Co. | Young               | Dorothy              | 6035558647        | 2304 Long Airport Avenue | Nashua    | NH      |         62005 | USA       |\n|  1 |          10101 | 2003-01-09   | 2003-01-18      | 2003-01-11     | Shipped  | Check on availability. |               128 | Blauer See Auto, Co.         | Keitel              | Roland               | +49 69 66 90 2555 | Lyonerstr. 34            | Frankfurt |         |         60528 | Germany   |\n|  2 |          10102 | 2003-01-10   | 2003-01-18      | 2003-01-14     | Shipped  |                        |               181 | Vitachrome Inc.              | Frick               | Michael              | 2125551500        | 2678 Kingston Rd.        | NYC       | NY      |         10022 | USA       |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-3_7","title":"Exercise 3","text":"<p>Choose the correct JOIN clause to SELECT all the records FROM the Customers table plus all the matches in the Orders table.</p> <pre><code>q = \"\"\"\nSelect * FROM orders o\nRIGHT OUTER JOIN customers c\non c.customerNumber == o.customerNumber\n\"\"\"\nsqlq =  sql_raw(q)\n</code></pre> <pre><code>(350, 16)\n|    |   orderNumber | orderDate   | requiredDate   | shippedDate   | status   | comments               |   customerNumber | customerName                 | contactLastName   | contactFirstName   | phone             | addressLine1             | city      | state   |   postalCode | country   |\n|---:|--------------:|:------------|:---------------|:--------------|:---------|:-----------------------|-----------------:|:-----------------------------|:------------------|:-------------------|:------------------|:-------------------------|:----------|:--------|-------------:|:----------|\n|  0 |         10100 | 2003-01-06  | 2003-01-13     | 2003-01-10    | Shipped  |                        |              363 | Online Diecast Creations Co. | Young             | Dorothy            | 6035558647        | 2304 Long Airport Avenue | Nashua    | NH      |        62005 | USA       |\n|  1 |         10101 | 2003-01-09  | 2003-01-18     | 2003-01-11    | Shipped  | Check on availability. |              128 | Blauer See Auto, Co.         | Keitel            | Roland             | +49 69 66 90 2555 | Lyonerstr. 34            | Frankfurt |         |        60528 | Germany   |\n</code></pre> <pre><code># Couldnt find any proper right join in djorm\nlh_fields, rh_field_dict = get_all_join_fields(Customers, Orders ,'orders')\n# select_related doesn't work for reverse relationships\normq = Customers.objects.order_by(F('orders__order_number').asc(nulls_last=True)).values( *lh_fields, **rh_field_dict)\normdf = orm_to_df(ormq)\n</code></pre> <pre><code>equal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   customer_number | customer_name                | contact_last_name   | contact_first_name   | phone             | address_line1            | city      | state   |   postal_code | country   |   order_number | order_date   | required_date   | shipped_date   | status   | comments               |\n|---:|------------------:|:-----------------------------|:--------------------|:---------------------|:------------------|:-------------------------|:----------|:--------|--------------:|:----------|---------------:|:-------------|:----------------|:---------------|:---------|:-----------------------|\n|  0 |               363 | Online Diecast Creations Co. | Young               | Dorothy              | 6035558647        | 2304 Long Airport Avenue | Nashua    | NH      |         62005 | USA       |          10100 | 2003-01-06   | 2003-01-13      | 2003-01-10     | Shipped  |                        |\n|  1 |               128 | Blauer See Auto, Co.         | Keitel              | Roland               | +49 69 66 90 2555 | Lyonerstr. 34            | Frankfurt |         |         60528 | Germany   |          10101 | 2003-01-09   | 2003-01-18      | 2003-01-11     | Shipped  | Check on availability. |\n|  2 |               181 | Vitachrome Inc.              | Frick               | Michael              | 2125551500        | 2678 Kingston Rd.        | NYC       | NY      |         10022 | USA       |          10102 | 2003-01-10   | 2003-01-18      | 2003-01-14     | Shipped  |                        |\n</code></pre>"},{"location":"orms/django/w3school/#group-by","title":"GROUP BY","text":""},{"location":"orms/django/w3school/#exercise-1_11","title":"Exercise 1","text":"<p>List the number of customers in each country.</p> <pre><code>sqlq = sql_raw(\"SELECT count(customerNumber) as cnt FROM  customers GROUP BY country;\")\normq = Customers.objects.values(\"country\").annotate(cnt=Count(\"country\")).values(\"cnt\")\nequal(sqlq, ormq)\n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    |   cnt |\n|---:|------:|\n|  0 |     5 |\n|  1 |     2 |\n|  2 |     2 |\n</code></pre>"},{"location":"orms/django/w3school/#exercise-2_11","title":"Exercise 2","text":"<p>List the number of customers in each country, ordered by the country with the most customers first.</p> <pre><code>sqlq = sql_raw(\"SELECT country, count(customerNumber) as cnt FROM customers GROUP BY country ORDER BY count(customerNumber) desc;\")\normq = Customers.objects.values(\"country\").annotate(cnt=Count(\"country\")).order_by(\"-cnt\").values(\"country\", \"cnt\")\nequal(sqlq, ormq) \n</code></pre> <p>Equal \u2714\ufe0f</p> <pre><code>|    | country   |   cnt |\n|---:|:----------|------:|\n|  0 | USA       |    36 |\n|  1 | Germany   |    13 |\n|  2 | France    |    12 |\n</code></pre>"}]}